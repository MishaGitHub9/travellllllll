// Vocabulary page functionality

// Immediate function exports for mobile compatibility
(function() {
    'use strict';
    
    // Define functions first, export later
    let functionsToExport = {};
    
    // Store reference for later export
    window.VOCABULARY_EXPORTS = functionsToExport;
    
    console.log('üöÄ Vocabulary.js starting to load...');
})();

// Vocabulary data for each situation
const vocabularyData = {
    planning: {
        title: "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥–æ—Ä–æ–∂—ñ",
        icon: "üìã",
        words: [
            { word: "booking", transcription: "[–±—É–∫—ñ–Ω–≥]", translation: "–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è" },
            { word: "reservation", transcription: "[—Ä–µ–∑–µ—Ä–≤–µ–π—à–Ω]", translation: "—Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—è" },
            { word: "itinerary", transcription: "[–∞–π—Ç—ñ–Ω–µ—Ä—ñ]", translation: "–º–∞—Ä—à—Ä—É—Ç" },
            { word: "schedule", transcription: "[—à–µ–¥—å—é–ª]", translation: "—Ä–æ–∑–∫–ª–∞–¥" },
            { word: "destination", transcription: "[–¥–µ—Å—Ç—ñ–Ω–µ–π—à–Ω]", translation: "–ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è" },
            { word: "departure", transcription: "[–¥—ñ–ø–∞—Ä—á–µ—Ä]", translation: "–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" },
            { word: "arrival", transcription: "[–µ—Ä–∞–π–≤–ª]", translation: "–ø—Ä–∏–±—É—Ç—Ç—è" },
            { word: "duration", transcription: "[–¥—å—é—Ä–µ–π—à–Ω]", translation: "—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å" },
            { word: "route", transcription: "[—Ä—É—Ç]", translation: "–º–∞—Ä—à—Ä—É—Ç" },
            { word: "trip", transcription: "[—Ç—Ä—ñ–ø]", translation: "–ø–æ–¥–æ—Ä–æ–∂" },
            { word: "journey", transcription: "[–¥–∂–æ—Ä–Ω—ñ]", translation: "–º–∞–Ω–¥—Ä—ñ–≤–∫–∞" },
            { word: "vacation", transcription: "[–≤–µ–∫–µ–π—à–Ω]", translation: "–≤—ñ–¥–ø—É—Å—Ç–∫–∞" },
            { word: "holiday", transcription: "[—Ö–æ–ª—ñ–¥–µ–π]", translation: "—Å–≤—è—Ç–æ, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫" },
            { word: "tour", transcription: "[—Ç—É—Ä]", translation: "—Ç—É—Ä" },
            { word: "excursion", transcription: "[–µ–∫—Å–∫–µ—Ä—à–Ω]", translation: "–µ–∫—Å–∫—É—Ä—Å—ñ—è" },
            { word: "guide", transcription: "[–≥–∞–π–¥]", translation: "–≥—ñ–¥" },
            { word: "passport", transcription: "[–ø–∞—Å–ø–æ—Ä—Ç]", translation: "–ø–∞—Å–ø–æ—Ä—Ç" },
            { word: "visa", transcription: "[–≤—ñ–∑–∞]", translation: "–≤—ñ–∑–∞" },
            { word: "insurance", transcription: "[—ñ–Ω—à—É—Ä–µ–Ω—Å]", translation: "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è" },
            { word: "currency", transcription: "[–∫–µ—Ä–µ–Ω—Å—ñ]", translation: "–≤–∞–ª—é—Ç–∞" },
            { word: "budget", transcription: "[–±–∞–¥–∂–µ—Ç]", translation: "–±—é–¥–∂–µ—Ç" },
            { word: "hotel", transcription: "[—Ö–æ—Ç–µ–ª]", translation: "–≥–æ—Ç–µ–ª—å" },
            { word: "hostel", transcription: "[—Ö–æ—Å—Ç–µ–ª]", translation: "—Ö–æ—Å—Ç–µ–ª" },
            { word: "luggage", transcription: "[–ª–∞–≥—ñ–¥–∂]", translation: "–±–∞–≥–∞–∂" },
            { word: "suitcase", transcription: "[—Å—É—Ç–∫–µ–π—Å]", translation: "–≤–∞–ª—ñ–∑–∞" }
        ],
        phrases: [
            { phrase: "I'd like to book a room", translation: "–Ø —Ö–æ—Ç—ñ–≤ –±–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É" },
            { phrase: "What's the best time to visit?", translation: "–ö–æ–ª–∏ –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏?" },
            { phrase: "How much does it cost?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ü–µ –∫–æ—à—Ç—É—î?" },
            { phrase: "Do I need a visa?", translation: "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º–µ–Ω—ñ –≤—ñ–∑–∞?" },
            { phrase: "What's included in the price?", translation: "–©–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ü—ñ–Ω—É?" },
            { phrase: "Can you recommend a good hotel?", translation: "–ß–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ —Ö–æ—Ä–æ—à–∏–π –≥–æ—Ç–µ–ª—å?" },
            { phrase: "Where can I exchange money?", translation: "–î–µ —è –º–æ–∂—É –æ–±–º—ñ–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ?" },
            { phrase: "What's the weather like?", translation: "–Ø–∫–∞ —Ç–∞–º –ø–æ–≥–æ–¥–∞?" },
            { phrase: "How long is the flight?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –ø–æ–ª—ñ—Ç?" },
            { phrase: "I need travel insurance", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞" },
            { phrase: "Can I cancel my booking?", translation: "–ß–∏ –º–æ–∂—É —è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?" },
            { phrase: "What documents do I need?", translation: "–Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?" },
            { phrase: "Is there a direct flight?", translation: "–ß–∏ —î –ø—Ä—è–º–∏–π —Ä–µ–π—Å?" },
            { phrase: "What's the departure time?", translation: "–û –∫–æ—Ç—Ä—ñ–π —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è?" },
            { phrase: "How far is it from the airport?", translation: "–Ø–∫ –¥–∞–ª–µ–∫–æ —Ü–µ –≤—ñ–¥ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É?" }
        ]
    },
    airport: {
        title: "–í –∞–µ—Ä–æ–ø–æ—Ä—Ç—É",
        icon: "‚úàÔ∏è",
        words: [
            { word: "airport", transcription: "[–µ–∞–ø–æ—Ä—Ç]", translation: "–∞–µ—Ä–æ–ø–æ—Ä—Ç" },
            { word: "flight", transcription: "[—Ñ–ª–∞–π—Ç]", translation: "—Ä–µ–π—Å" },
            { word: "boarding pass", transcription: "[–±–æ—Ä–¥—ñ–Ω–≥ –ø–∞—Å]", translation: "–ø–æ—Å–∞–¥–æ—á–Ω–∏–π –∫–≤–∏—Ç–æ–∫" },
            { word: "gate", transcription: "[–≥–µ–π—Ç]", translation: "–≤–∏—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∞–¥–∫—É" },
            { word: "check-in", transcription: "[—á–µ–∫ —ñ–Ω]", translation: "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" },
            { word: "baggage", transcription: "[–±–µ–≥—ñ–¥–∂]", translation: "–±–∞–≥–∞–∂" },
            { word: "luggage", transcription: "[–ª–∞–≥—ñ–¥–∂]", translation: "–±–∞–≥–∞–∂" },
            { word: "suitcase", transcription: "[—Å—É—Ç–∫–µ–π—Å]", translation: "–≤–∞–ª—ñ–∑–∞" },
            { word: "carry-on", transcription: "[–∫–µ—Ä—ñ –æ–Ω]", translation: "—Ä—É—á–Ω–∞ –ø–æ–∫–ª–∞–∂–∞" },
            { word: "security", transcription: "[—Å—ñ–∫—å—é—Ä—ñ—Ç—ñ]", translation: "–±–µ–∑–ø–µ–∫–∞" },
            { word: "customs", transcription: "[–∫–∞—Å—Ç–º–∑]", translation: "–º–∏—Ç–Ω–∏—Ü—è" },
            { word: "passport control", transcription: "[–ø–∞—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª]", translation: "–ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å" },
            { word: "delay", transcription: "[–¥—ñ–ª–µ–π]", translation: "–∑–∞—Ç—Ä–∏–º–∫–∞" },
            { word: "cancelled", transcription: "[–∫–µ–Ω—Å–µ–ª–¥]", translation: "—Å–∫–∞—Å–æ–≤–∞–Ω–∏–π" },
            { word: "departure board", transcription: "[–¥—ñ–ø–∞—Ä—á–µ –±–æ—Ä–¥]", translation: "—Ç–∞–±–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å" },
            { word: "arrival board", transcription: "[–µ—Ä–∞–π–≤–ª –±–æ—Ä–¥]", translation: "—Ç–∞–±–ª–æ –ø—Ä–∏–±—É—Ç—Ç—ñ–≤" },
            { word: "terminal", transcription: "[—Ç–µ—Ä–º—ñ–Ω–∞–ª]", translation: "—Ç–µ—Ä–º—ñ–Ω–∞–ª" },
            { word: "runway", transcription: "[—Ä–∞–Ω–≤–µ–π]", translation: "–∑–ª—ñ—Ç–Ω–∞ —Å–º—É–≥–∞" },
            { word: "pilot", transcription: "[–ø–∞–π–ª–µ—Ç]", translation: "–ø—ñ–ª–æ—Ç" },
            { word: "flight attendant", transcription: "[—Ñ–ª–∞–π—Ç –µ—Ç–µ–Ω–¥–µ–Ω—Ç]", translation: "–±–æ—Ä—Ç–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫" },
            { word: "seat", transcription: "[—Å—ñ—Ç]", translation: "–º—ñ—Å—Ü–µ" },
            { word: "window seat", transcription: "[–≤—ñ–Ω–¥–æ—É —Å—ñ—Ç]", translation: "–º—ñ—Å—Ü–µ –±—ñ–ª—è –≤—ñ–∫–Ω–∞" }
        ],
        phrases: [
            { phrase: "Where is check-in?", translation: "–î–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è?" },
            { phrase: "I'd like a window seat", translation: "–Ø —Ö–æ—Ç—ñ–≤ –±–∏ –º—ñ—Å—Ü–µ –±—ñ–ª—è –≤—ñ–∫–Ω–∞" },
            { phrase: "Is my flight on time?", translation: "–ú—ñ–π —Ä–µ–π—Å –≤—á–∞—Å–Ω–æ?" },
            { phrase: "Where is gate 5?", translation: "–î–µ –≤–∏—Ö—ñ–¥ 5?" },
            { phrase: "How much can I carry on?", translation: "–°–∫—ñ–ª—å–∫–∏ —è –º–æ–∂—É –≤–∑—è—Ç–∏ –≤ —Ä—É—á–Ω—É –ø–æ–∫–ª–∞–∂—É?" },
            { phrase: "My luggage is missing", translation: "–ú—ñ–π –±–∞–≥–∞–∂ –∑–Ω–∏–∫" },
            { phrase: "I need to declare this", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–¥–µ–∫–ª–∞—Ä—É–≤–∞—Ç–∏ —Ü–µ" },
            { phrase: "Is this the line for security?", translation: "–¶–µ —á–µ—Ä–≥–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –±–µ–∑–ø–µ–∫–∏?" },
            { phrase: "When do we board?", translation: "–ö–æ–ª–∏ –º–∏ —Å–∞–¥–∏–º–æ—Å—è?" },
            { phrase: "My flight is delayed", translation: "–ú—ñ–π —Ä–µ–π—Å –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è" },
            { phrase: "Can I upgrade my seat?", translation: "–ß–∏ –º–æ–∂—É —è –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ?" },
            { phrase: "Where can I find a taxi?", translation: "–î–µ —è –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫—Å—ñ?" },
            { phrase: "Is there free wifi?", translation: "–ß–∏ —î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π wifi?" },
            { phrase: "Where is the baggage claim?", translation: "–î–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–≥–∞–∂—É?" },
            { phrase: "I lost my boarding pass", translation: "–Ø –∑–∞–≥—É–±–∏–≤ —Å–≤—ñ–π –ø–æ—Å–∞–¥–æ—á–Ω–∏–π —Ç–∞–ª–æ–Ω" },
            { phrase: "What terminal is my flight?", translation: "–í —è–∫–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –º—ñ–π —Ä–µ–π—Å?" },
            { phrase: "The flight is boarding now", translation: "–ó–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–æ—Å–∞–¥–∫–∞ –Ω–∞ —Ä–µ–π—Å" },
            { phrase: "Please fasten your seatbelt", translation: "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—Å—Ç–µ–±–Ω—ñ—Ç—å —Ä–µ–º—ñ–Ω—å –±–µ–∑–ø–µ–∫–∏" }
        ]
    },
    hotel: {
        title: "–í –≥–æ—Ç–µ–ª—ñ",
        icon: "üè®",
        words: [
            { word: "hotel", transcription: "[–≥–æ—Ç–µ–ª]", translation: "–≥–æ—Ç–µ–ª—å" },
            { word: "reservation", transcription: "[—Ä–µ–∑–µ—Ä–≤–µ–π—à–Ω]", translation: "–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è" },
            { word: "reception", transcription: "[—Ä—ñ—Å–µ–ø—à–Ω]", translation: "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" },
            { word: "room", transcription: "[—Ä—É–º]", translation: "–∫—ñ–º–Ω–∞—Ç–∞" },
            { word: "key card", transcription: "[–∫—ñ –∫–∞—Ä–¥]", translation: "–∫–ª—é—á-–∫–∞—Ä—Ç–∞" },
            { word: "check-in", transcription: "[—á–µ–∫ —ñ–Ω]", translation: "–∑–∞—Å–µ–ª–µ–Ω–Ω—è" },
            { word: "check-out", transcription: "[—á–µ–∫ –∞—É—Ç]", translation: "–≤–∏—Å–µ–ª–µ–Ω–Ω—è" },
            { word: "single room", transcription: "[—Å—ñ–Ω–≥–ª —Ä—É–º]", translation: "–æ–¥–Ω–æ–º—ñ—Å–Ω–∏–π –Ω–æ–º–µ—Ä" },
            { word: "double room", transcription: "[–¥–∞–±–ª —Ä—É–º]", translation: "–¥–≤–æ–º—ñ—Å–Ω–∏–π –Ω–æ–º–µ—Ä" },
            { word: "suite", transcription: "[—Å–≤—ñ—Ç]", translation: "–ª—é–∫—Å" },
            { word: "breakfast", transcription: "[–±—Ä–µ–∫—Ñ–∞—Å—Ç]", translation: "—Å–Ω—ñ–¥–∞–Ω–æ–∫" },
            { word: "elevator", transcription: "[–µ–ª—ñ–≤–µ–π—Ç–æ—Ä]", translation: "–ª—ñ—Ñ—Ç" },
            { word: "floor", transcription: "[—Ñ–ª–æ—Ä]", translation: "–ø–æ–≤–µ—Ä—Ö" },
            { word: "towel", transcription: "[—Ç–∞—É–µ–ª]", translation: "—Ä—É—à–Ω–∏–∫" },
            { word: "blanket", transcription: "[–±–ª–µ–Ω–∫–µ—Ç]", translation: "–∫–æ–≤–¥—Ä–∞" },
            { word: "pillow", transcription: "[–ø—ñ–ª–æ—É]", translation: "–ø–æ–¥—É—à–∫–∞" },
            { word: "bathroom", transcription: "[–±–∞—Å—Ä—É–º]", translation: "–≤–∞–Ω–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞" },
            { word: "shower", transcription: "[—à–∞—É–µ—Ä]", translation: "–¥—É—à" },
            { word: "air conditioning", transcription: "[–µ–∞ –∫–æ–Ω–¥–∏—à–Ω—ñ–Ω–≥]", translation: "–∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä" },
            { word: "wifi", transcription: "[–≤–∞–π—Ñ–∞–π]", translation: "–≤–∞–π—Ñ–∞–π" },
            { word: "cleaning", transcription: "[–∫–ª—ñ–Ω–∏–Ω–≥]", translation: "–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è" },
            { word: "receptionist", transcription: "[—Ä—ñ—Å–µ–ø—à–Ω—ñ—Å—Ç]", translation: "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" },
            { word: "lobby", transcription: "[–ª–æ–±—ñ]", translation: "–≤–µ—Å—Ç–∏–±—é–ª—å" },
            { word: "service", transcription: "[—Å–µ—Ä–≤—ñ—Å]", translation: "—Å–µ—Ä–≤—ñ—Å" },
            { word: "laundry", transcription: "[–ª–æ–Ω–¥—Ä—ñ]", translation: "–ø—Ä–∞–ª—å–Ω—è" },
            { word: "safe", transcription: "[—Å–µ–π—Ñ]", translation: "—Å–µ–π—Ñ" },
            { word: "view", transcription: "[–≤'—é]", translation: "–≤–∏–¥" }
        ],
        phrases: [
            { phrase: "I have a reservation", translation: "–£ –º–µ–Ω–µ —î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è" },
            { phrase: "Can I check in?", translation: "–ú–æ–∂–Ω–∞ –∑–∞—Å–µ–ª–∏—Ç–∏—Å—è?" },
            { phrase: "What time is breakfast?", translation: "–û –∫–æ—Ç—Ä—ñ–π —Å–Ω—ñ–¥–∞–Ω–æ–∫?" },
            { phrase: "Can I have the wifi password?", translation: "–ú–æ–∂–Ω–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞–π—Ñ–∞—é?" },
            { phrase: "Is breakfast included?", translation: "–°–Ω—ñ–¥–∞–Ω–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ?" },
            { phrase: "I need more towels", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ —Ä—É—à–Ω–∏–∫—ñ–≤" },
            { phrase: "Can I have a wake-up call?", translation: "–ú–æ–∂–Ω–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è?" },
            { phrase: "Where is the elevator?", translation: "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ª—ñ—Ñ—Ç?" },
            { phrase: "Can I get a late check-out?", translation: "–ú–æ–∂–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ –≤–∏—Å–µ–ª–µ–Ω–Ω—è?" },
            { phrase: "My room is not clean", translation: "–ú–æ—è –∫—ñ–º–Ω–∞—Ç–∞ –Ω–µ –ø—Ä–∏–±—Ä–∞–Ω–∞" },
            { phrase: "The air conditioning isn't working", translation: "–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î" },
            { phrase: "Can I change my room?", translation: "–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É?" },
            { phrase: "Is there a laundry service?", translation: "–Ñ –ø–æ—Å–ª—É–≥–∞ –ø—Ä–∞–Ω–Ω—è?" },
            { phrase: "Where is the reception?", translation: "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ü—ñ—è?" },
            { phrase: "Can I leave my luggage here?", translation: "–ú–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –±–∞–≥–∞–∂ —Ç—É—Ç?" },
            { phrase: "How do I get to my room?", translation: "–Ø–∫ –ø—Ä–æ–π—Ç–∏ –¥–æ –º–æ—î—ó –∫—ñ–º–Ω–∞—Ç–∏?" },
            { phrase: "Is there a safe in the room?", translation: "–£ –Ω–æ–º–µ—Ä—ñ —î —Å–µ–π—Ñ?" },
            { phrase: "Can I have an extra pillow?", translation: "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–æ–¥—É—à–∫—É?" },
            { phrase: "What is the view from the room?", translation: "–Ø–∫–∏–π –≤–∏–≥–ª—è–¥ –∑ –∫—ñ–º–Ω–∞—Ç–∏?" },
            { phrase: "Where can I park my car?", translation: "–î–µ –º–æ–∂–Ω–∞ –ø—Ä–∏–ø–∞—Ä–∫—É–≤–∞—Ç–∏ –º–∞—à–∏–Ω—É?" }
        ]
    },
    restaurant: {
        title: "–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ",
        icon: "üçΩÔ∏è",
        words: [
            { word: "restaurant", transcription: "[—Ä–µ—Å—Ç–∞—Ä–∞–Ω—Ç]", translation: "—Ä–µ—Å—Ç–æ—Ä–∞–Ω" },
            { word: "menu", transcription: "[–º–µ–Ω—é]", translation: "–º–µ–Ω—é" },
            { word: "waiter", transcription: "[–≤–µ–π—Ç—Ä]", translation: "–æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç" },
            { word: "waitress", transcription: "[–≤–µ–π—Ç—Ä–µ—Å]", translation: "–æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∫–∞" },
            { word: "table", transcription: "[—Ç–µ–π–±–ª]", translation: "—Å—Ç—ñ–ª" },
            { word: "reservation", transcription: "[—Ä–µ–∑–µ—Ä–≤–µ–π—à–Ω]", translation: "–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è" },
            { word: "order", transcription: "[–æ—Ä–¥–µ—Ä]", translation: "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" },
            { word: "bill", transcription: "[–±—ñ–ª]", translation: "—Ä–∞—Ö—É–Ω–æ–∫" },
            { word: "tip", transcription: "[—Ç—ñ–ø]", translation: "—á–∞–π–æ–≤—ñ" },
            { word: "dish", transcription: "[–¥—ñ—à]", translation: "—Å—Ç—Ä–∞–≤–∞" },
            { word: "appetizer", transcription: "[–µ–ø–µ—Ç–∞–π–∑–µ—Ä]", translation: "–∑–∞–∫—É—Å–∫–∞" },
            { word: "main course", transcription: "[–º–µ–π–Ω –∫–æ—É—Ä—Å]", translation: "–æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç—Ä–∞–≤–∞" },
            { word: "dessert", transcription: "[–¥–µ–∑–µ—Ä—Ç]", translation: "–¥–µ—Å–µ—Ä—Ç" },
            { word: "drink", transcription: "[–¥—Ä—ñ–Ω–∫]", translation: "–Ω–∞–ø—ñ–π" },
            { word: "water", transcription: "[–≤–æ—Ç–µ—Ä]", translation: "–≤–æ–¥–∞" },
            { word: "juice", transcription: "[–¥–∂—É—Å]", translation: "—Å—ñ–∫" },
            { word: "wine", transcription: "[–≤–∞–π–Ω]", translation: "–≤–∏–Ω–æ" },
            { word: "beer", transcription: "[–±—ñ—Ä]", translation: "–ø–∏–≤–æ" },
            { word: "fork", transcription: "[—Ñ–æ—Ä–∫]", translation: "–≤–∏–¥–µ–ª–∫–∞" },
            { word: "knife", transcription: "[–Ω–∞–π—Ñ]", translation: "–Ω—ñ–∂" },
            { word: "spoon", transcription: "[—Å–ø—É–Ω]", translation: "–ª–æ–∂–∫–∞" },
            { word: "napkin", transcription: "[–Ω–µ–ø–∫—ñ–Ω]", translation: "—Å–µ—Ä–≤–µ—Ç–∫–∞" },
            { word: "salt", transcription: "[—Å–æ–ª—Ç]", translation: "—Å—ñ–ª—å" },
            { word: "pepper", transcription: "[–ø–µ–ø–µ—Ä]", translation: "–ø–µ—Ä–µ—Ü—å" },
            { word: "bread", transcription: "[–±—Ä–µ–¥]", translation: "—Ö–ª—ñ–±" },
            { word: "soup", transcription: "[—Å—É–ø]", translation: "—Å—É–ø" },
            { word: "salad", transcription: "[—Å–∞–ª–∞–¥]", translation: "—Å–∞–ª–∞—Ç" },
            { word: "meat", transcription: "[–º—ñ—Ç]", translation: "–º'—è—Å–æ" },
            { word: "fish", transcription: "[—Ñ—ñ—à]", translation: "—Ä–∏–±–∞" },
            { word: "vegetarian", transcription: "[–≤–µ–¥–∂–µ—Ç–µ—Ä—ñ–∞–Ω]", translation: "–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å" }
        ],
        phrases: [
            { phrase: "A table for two, please", translation: "–°—Ç—ñ–ª –Ω–∞ –¥–≤–æ—Ö, –±—É–¥—å –ª–∞—Å–∫–∞" },
            { phrase: "Can I see the menu?", translation: "–ú–æ–∂–Ω–∞ –º–µ–Ω—é?" },
            { phrase: "I would like to order", translation: "–Ø —Ö–æ—Ç—ñ–≤ –±–∏ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" },
            { phrase: "What do you recommend?", translation: "–©–æ –≤–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ?" },
            { phrase: "Is this dish vegetarian?", translation: "–¶—è —Å—Ç—Ä–∞–≤–∞ –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–∞?" },
            { phrase: "Can I have the bill, please?", translation: "–ú–æ–∂–Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞?" },
            { phrase: "Is service included?", translation: "–ß–∞–π–æ–≤—ñ –≤–∫–ª—é—á–µ–Ω—ñ?" },
            { phrase: "Can I have some water?", translation: "–ú–æ–∂–Ω–∞ —Ç—Ä–æ—Ö–∏ –≤–æ–¥–∏?" },
            { phrase: "I am allergic to nuts", translation: "–£ –º–µ–Ω–µ –∞–ª–µ—Ä–≥—ñ—è –Ω–∞ –≥–æ—Ä—ñ—Ö–∏" },
            { phrase: "No onions, please", translation: "–ë–µ–∑ —Ü–∏–±—É–ª—ñ, –±—É–¥—å –ª–∞—Å–∫–∞" },
            { phrase: "Can I have this to go?", translation: "–ú–æ–∂–Ω–∞ —Ü–µ –∑ —Å–æ–±–æ—é?" },
            { phrase: "The food is delicious", translation: "–á–∂–∞ —Å–º–∞—á–Ω–∞" },
            { phrase: "Could we have some bread?", translation: "–ú–æ–∂–Ω–∞ —Ç—Ä–æ—Ö–∏ —Ö–ª—ñ–±–∞?" },
            { phrase: "Do you have a kids menu?", translation: "–£ –≤–∞—Å —î –¥–∏—Ç—è—á–µ –º–µ–Ω—é?" },
            { phrase: "Can I pay by card?", translation: "–ú–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é?" },
            { phrase: "Is there a table available?", translation: "–Ñ –≤—ñ–ª—å–Ω–∏–π —Å—Ç—ñ–ª?" },
            { phrase: "I would like a glass of wine", translation: "–Ø —Ö–æ—Ç—ñ–≤ –±–∏ –∫–µ–ª–∏—Ö –≤–∏–Ω–∞" },
            { phrase: "Can I get the wifi password?", translation: "–ú–æ–∂–Ω–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞–π—Ñ–∞—é?" },
            { phrase: "Could you bring the dessert menu?", translation: "–ú–æ–∂–Ω–∞ –º–µ–Ω—é –¥–µ—Å–µ—Ä—Ç—ñ–≤?" },
            { phrase: "Can I have a receipt?", translation: "–ú–æ–∂–Ω–∞ —á–µ–∫?" },
            { phrase: "Excuse me, we are ready to order", translation: "–í–∏–±–∞—á—Ç–µ, –º–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏" },
            { phrase: "Could you pack this for me?", translation: "–ú–æ–∂–µ—Ç–µ —Ü–µ –∑–∞–ø–∞–∫—É–≤–∞—Ç–∏ –¥–ª—è –º–µ–Ω–µ?" },
            { phrase: "Is there a vegetarian option?", translation: "–Ñ –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?" },
            { phrase: "Can I have a coffee?", translation: "–ú–æ–∂–Ω–∞ –∫–∞–≤—É?" }
        ]
    },
    transport: {
        title: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        icon: "üöå",
        words: [
            { word: "bus", transcription: "[–±–∞—Å]", translation: "–∞–≤—Ç–æ–±—É—Å" },
            { word: "train", transcription: "[—Ç—Ä–µ–π–Ω]", translation: "–ø–æ—Ç—è–≥" },
            { word: "tram", transcription: "[—Ç—Ä–µ–º]", translation: "—Ç—Ä–∞–º–≤–∞–π" },
            { word: "metro", transcription: "[–º–µ—Ç—Ä–æ]", translation: "–º–µ—Ç—Ä–æ" },
            { word: "taxi", transcription: "[—Ç–∞–∫—Å—ñ]", translation: "—Ç–∞–∫—Å—ñ" },
            { word: "ticket", transcription: "[—Ç—ñ–∫–µ—Ç]", translation: "–∫–≤–∏—Ç–æ–∫" },
            { word: "station", transcription: "[—Å—Ç–µ–π—à–Ω]", translation: "—Å—Ç–∞–Ω—Ü—ñ—è" },
            { word: "platform", transcription: "[–ø–ª–∞—Ç—Ñ–æ—Ä–º]", translation: "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞" },
            { word: "stop", transcription: "[—Å—Ç–æ–ø]", translation: "–∑—É–ø–∏–Ω–∫–∞" },
            { word: "route", transcription: "[—Ä—É—Ç]", translation: "–º–∞—Ä—à—Ä—É—Ç" },
            { word: "driver", transcription: "[–¥—Ä–∞–π–≤–µ—Ä]", translation: "–≤–æ–¥—ñ–π" },
            { word: "passenger", transcription: "[–ø–∞—Å–µ–Ω–¥–∂–µ—Ä]", translation: "–ø–∞—Å–∞–∂–∏—Ä" },
            { word: "departure", transcription: "[–¥—ñ–ø–∞—Ä—á–µ]", translation: "–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" },
            { word: "arrival", transcription: "[–µ—Ä–∞–π–≤–∞–ª]", translation: "–ø—Ä–∏–±—É—Ç—Ç—è" },
            { word: "schedule", transcription: "[—Å–∫–µ–¥–∂—É–ª]", translation: "—Ä–æ–∑–∫–ª–∞–¥" },
            { word: "fare", transcription: "[—Ñ–µ—Ä]", translation: "–≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—ó–∑–¥—É" },
            { word: "change", transcription: "[—á–µ–π–Ω–¥–∂]", translation: "–ø–µ—Ä–µ—Å–∞–¥–∫–∞" },
            { word: "seat", transcription: "[—Å—ñ—Ç]", translation: "–º—ñ—Å—Ü–µ" },
            { word: "car", transcription: "[–∫–∞—Ä]", translation: "–∞–≤—Ç–æ–º–æ–±—ñ–ª—å" },
            { word: "bicycle", transcription: "[–±–∞–π—Å–∏–∫–ª]", translation: "–≤–µ–ª–æ—Å–∏–ø–µ–¥" },
            { word: "motorcycle", transcription: "[–º–æ—Ç–æ—Ü–∏–∫–ª]", translation: "–º–æ—Ç–æ—Ü–∏–∫–ª" },
            { word: "parking", transcription: "[–ø–∞—Ä–∫—ñ–Ω–≥]", translation: "–ø–∞—Ä–∫—ñ–Ω–≥" },
            { word: "ticket machine", transcription: "[—Ç—ñ–∫–µ—Ç –º–∞—à—ñ–Ω]", translation: "–∫–≤–∏—Ç–∫–æ–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç" },
            { word: "conductor", transcription: "[–∫–æ–Ω–¥–∞–∫—Ç–æ—Ä]", translation: "–∫–æ–Ω–¥—É–∫—Ç–æ—Ä" }
        ],
        phrases: [
            { phrase: "Where is the bus stop?", translation: "–î–µ –∑—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å–∞?" },
            { phrase: "How much is a ticket?", translation: "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –∫–≤–∏—Ç–æ–∫?" },
            { phrase: "Which platform for train to Kyiv?", translation: "–Ø–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –ø–æ—Ç—è–≥ –¥–æ –ö–∏—î–≤–∞?" },
            { phrase: "When does the next tram leave?", translation: "–ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–∞–º–≤–∞–π?" },
            { phrase: "Is this seat taken?", translation: "–¶–µ –º—ñ—Å—Ü–µ –∑–∞–π–Ω—è—Ç–µ?" },
            { phrase: "Can I buy a ticket here?", translation: "–ú–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ —Ç—É—Ç?" },
            { phrase: "Where do I change trains?", translation: "–î–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∞ –Ω–∞ —ñ–Ω—à–∏–π –ø–æ—Ç—è–≥?" },
            { phrase: "How long is the journey?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –ø–æ—ó–∑–¥–∫–∞?" },
            { phrase: "Does this bus go to the center?", translation: "–¶–µ–π –∞–≤—Ç–æ–±—É—Å —ó–¥–µ –≤ —Ü–µ–Ω—Ç—Ä?" },
            { phrase: "Can you call a taxi for me?", translation: "–ú–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫—Å—ñ –¥–ª—è –º–µ–Ω–µ?" },
            { phrase: "Is there a night bus?", translation: "–Ñ –Ω—ñ—á–Ω–∏–π –∞–≤—Ç–æ–±—É—Å?" },
            { phrase: "Where is the ticket office?", translation: "–î–µ –∫–∞—Å–∞?" },
            { phrase: "What time is the last train?", translation: "–û –∫–æ—Ç—Ä—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Ç—è–≥?" },
            { phrase: "Do I need to validate my ticket?", translation: "–ü–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–º–ø–æ—Å—Ç—É–≤–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫?" },
            { phrase: "Is this the right direction?", translation: "–¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫?" },
            { phrase: "How do I get to the airport?", translation: "–Ø–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É?" }
        ]
    },
    shopping: {
        title: "–ü–æ–∫—É–ø–∫–∏",
        icon: "üõçÔ∏è",
        words: [
            { word: "shop", transcription: "[—à–æ–ø]", translation: "–º–∞–≥–∞–∑–∏–Ω" },
            { word: "store", transcription: "[—Å—Ç–æ—Ä]", translation: "–∫—Ä–∞–º–Ω–∏—Ü—è" },
            { word: "mall", transcription: "[–º–æ–ª]", translation: "—Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä" },
            { word: "market", transcription: "[–º–∞—Ä–∫–µ—Ç]", translation: "—Ä–∏–Ω–æ–∫" },
            { word: "cashier", transcription: "[–∫–µ—à—ñ—Ä]", translation: "–∫–∞—Å–∏—Ä–∞" },
            { word: "price", transcription: "[–ø—Ä–∞–π—Å]", translation: "—Ü—ñ–Ω–∞" },
            { word: "discount", transcription: "[–¥—ñ—Å–∫–∞—É–Ω—Ç]", translation: "–∑–Ω–∏–∂–∫–∞" },
            { word: "sale", transcription: "[—Å–µ–π–ª]", translation: "—Ä–æ–∑–ø—Ä–æ–¥–∞–∂" },
            { word: "receipt", transcription: "[—Ä—ñ—Å—ñ—Ç]", translation: "—á–µ–∫" },
            { word: "bag", transcription: "[–±–µ–≥]", translation: "–ø–∞–∫–µ—Ç" },
            { word: "gift", transcription: "[–≥—ñ—Ñ—Ç]", translation: "–ø–æ–¥–∞—Ä—É–Ω–æ–∫" },
            { word: "souvenir", transcription: "[—Å—É–≤–µ–Ω—ñ—Ä]", translation: "—Å—É–≤–µ–Ω—ñ—Ä" },
            { word: "credit card", transcription: "[–∫—Ä–µ–¥–∏—Ç –∫–∞—Ä–¥]", translation: "–∫—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∫–∞" },
            { word: "cash", transcription: "[–∫–µ—à]", translation: "–≥–æ—Ç—ñ–≤–∫–∞" },
            { word: "change", transcription: "[—á–µ–π–Ω–¥–∂]", translation: "—Ä–µ—à—Ç–∞" },
            { word: "fitting room", transcription: "[—Ñ—ñ—Ç—ñ–Ω–≥ —Ä—É–º]", translation: "–ø—Ä–∏–º—ñ—Ä–æ—á–Ω–∞" },
            { word: "size", transcription: "[—Å–∞–π–∑]", translation: "—Ä–æ–∑–º—ñ—Ä" },
            { word: "brand", transcription: "[–±—Ä–µ–Ω–¥]", translation: "–±—Ä–µ–Ω–¥" },
            { word: "product", transcription: "[–ø—Ä–æ–¥–∞–∫—Ç]", translation: "—Ç–æ–≤–∞—Ä" },
            { word: "customer", transcription: "[–∫–∞—Å—Ç–æ–º–µ—Ä]", translation: "–ø–æ–∫—É–ø–µ—Ü—å" },
            { word: "queue", transcription: "[–∫'—é]", translation: "—á–µ—Ä–≥–∞" },
            { word: "open", transcription: "[–æ—É–ø–µ–Ω]", translation: "–≤—ñ–¥–∫—Ä–∏—Ç–æ" },
            { word: "closed", transcription: "[–∫–ª–æ—É–∑–¥]", translation: "–∑–∞—á–∏–Ω–µ–Ω–æ" },
            { word: "warranty", transcription: "[–≤–æ—Ä–∞–Ω—Ç—ñ]", translation: "–≥–∞—Ä–∞–Ω—Ç—ñ—è" },
            { word: "exchange", transcription: "[—ñ–∫—Å—á–µ–π–Ω–¥–∂]", translation: "–æ–±–º—ñ–Ω" }
        ],
        phrases: [
            { phrase: "How much does this cost?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ü–µ –∫–æ—à—Ç—É—î?" },
            { phrase: "Do you have this in another size?", translation: "–£ –≤–∞—Å —î —Ü–µ –≤ —ñ–Ω—à–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ?" },
            { phrase: "Can I try this on?", translation: "–ú–æ–∂–Ω–∞ –ø—Ä–∏–º—ñ—Ä—è—Ç–∏ —Ü–µ?" },
            { phrase: "Is there a discount?", translation: "–Ñ –∑–Ω–∏–∂–∫–∞?" },
            { phrase: "Can I pay by card?", translation: "–ú–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é?" },
            { phrase: "Where is the fitting room?", translation: "–î–µ –ø—Ä–∏–º—ñ—Ä–æ—á–Ω–∞?" },
            { phrase: "Can I have a bag?", translation: "–ú–æ–∂–Ω–∞ –ø–∞–∫–µ—Ç?" },
            { phrase: "Do you have a gift wrap?", translation: "–Ñ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞?" },
            { phrase: "Can I return this?", translation: "–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ü–µ?" },
            { phrase: "Is this on sale?", translation: "–¶–µ –∑—ñ –∑–Ω–∏–∂–∫–æ—é?" },
            { phrase: "Where is the cashier?", translation: "–î–µ –∫–∞—Å–∞?" },
            { phrase: "Can I get a receipt?", translation: "–ú–æ–∂–Ω–∞ —á–µ–∫?" },
            { phrase: "What are your opening hours?", translation: "–Ø–∫–∏–π —É –≤–∞—Å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏?" },
            { phrase: "Do you have this in another color?", translation: "–Ñ —Ü–µ –≤ —ñ–Ω—à–æ–º—É –∫–æ–ª—å–æ—Ä—ñ?" },
            { phrase: "Can I exchange this?", translation: "–ú–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ —Ü–µ?" },
            { phrase: "Is there a warranty?", translation: "–Ñ –≥–∞—Ä–∞–Ω—Ç—ñ—è?" },
            { phrase: "Where can I find souvenirs?", translation: "–î–µ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —Å—É–≤–µ–Ω—ñ—Ä–∏?" },
            { phrase: "Can I pay in cash?", translation: "–ú–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –≥–æ—Ç—ñ–≤–∫–æ—é?" },
            { phrase: "Is there a queue?", translation: "–Ñ —á–µ—Ä–≥–∞?" },
            { phrase: "Is this shop open?", translation: "–¶–µ–π –º–∞–≥–∞–∑–∏–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π?" },
            { phrase: "Do you have a loyalty card?", translation: "–£ –≤–∞—Å —î –∫–∞—Ä—Ç–∫–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ?" },
            { phrase: "Can I get a refund?", translation: "–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥—Ä–æ—à—ñ?" }
        ]
    },
    directions: {
        title: "–û—Ä—ñ—î–Ω—Ç—É–≤–∞–Ω–Ω—è",
        icon: "üó∫Ô∏è",
        words: [
            { word: "map", transcription: "[–º–µ–ø]", translation: "–∫–∞—Ä—Ç–∞" },
            { word: "street", transcription: "[—Å—Ç—Ä—ñ—Ç]", translation: "–≤—É–ª–∏—Ü—è" },
            { word: "avenue", transcription: "[–µ–≤–µ–Ω—é]", translation: "–ø—Ä–æ—Å–ø–µ–∫—Ç" },
            { word: "square", transcription: "[—Å–∫–≤–µ—Ä]", translation: "–ø–ª–æ—â–∞" },
            { word: "corner", transcription: "[–∫–æ—Ä–Ω–µ—Ä]", translation: "–∫—É—Ç" },
            { word: "intersection", transcription: "[—ñ–Ω—Ç–µ—Ä—Å–µ–∫—à–Ω]", translation: "–ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è" },
            { word: "crosswalk", transcription: "[–∫—Ä–æ—Å–≤–æ–∫]", translation: "–ø—ñ—à–æ—Ö—ñ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥" },
            { word: "traffic light", transcription: "[—Ç—Ä–∞—Ñ—ñ–∫ –ª–∞–π—Ç]", translation: "—Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä" },
            { word: "sign", transcription: "[—Å–∞–π–Ω]", translation: "–∑–Ω–∞–∫" },
            { word: "direction", transcription: "[–¥–∞–π—Ä–µ–∫—à–Ω]", translation: "–Ω–∞–ø—Ä—è–º–æ–∫" },
            { word: "left", transcription: "[–ª–µ—Ñ—Ç]", translation: "–ª—ñ–≤–æ—Ä—É—á" },
            { word: "right", transcription: "[—Ä–∞–π—Ç]", translation: "–ø—Ä–∞–≤–æ—Ä—É—á" },
            { word: "straight", transcription: "[—Å—Ç—Ä–µ–π—Ç]", translation: "–ø—Ä—è–º–æ" },
            { word: "behind", transcription: "[–±—ñ—Ö–∞–π–Ω–¥]", translation: "–ø–æ–∑–∞–¥—É" },
            { word: "in front of", transcription: "[—ñ–Ω —Ñ—Ä–æ–Ω—Ç –æ–≤]", translation: "–ø–æ–ø–µ—Ä–µ–¥—É" },
            { word: "near", transcription: "[–Ω—ñ–∞]", translation: "–ø–æ—Ä—É—á" },
            { word: "far", transcription: "[—Ñ–∞—Ä]", translation: "–¥–∞–ª–µ–∫–æ" },
            { word: "opposite", transcription: "[–æ–ø–æ–∑–∏—Ç]", translation: "–Ω–∞–≤–ø—Ä–æ—Ç–∏" },
            { word: "next to", transcription: "[–Ω–µ–∫—Å—Ç —Ç—É]", translation: "–ø–æ—Ä—É—á –∑" },
            { word: "between", transcription: "[–±—ñ—Ç–≤—ñ–Ω]", translation: "–º—ñ–∂" }
        ],
        phrases: [
            { phrase: "How do I get to the city center?", translation: "–Ø–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ —Ü–µ–Ω—Ç—Ä—É –º—ñ—Å—Ç–∞?" },
            { phrase: "Where is the nearest metro station?", translation: "–î–µ –Ω–∞–π–±–ª–∏–∂—á–∞ —Å—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ?" },
            { phrase: "Is it far from here?", translation: "–¶–µ –¥–∞–ª–µ–∫–æ –∑–≤—ñ–¥—Å–∏?" },
            { phrase: "Can you show me on the map?", translation: "–ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ?" },
            { phrase: "Go straight ahead", translation: "–Ü–¥—ñ—Ç—å –ø—Ä—è–º–æ" },
            { phrase: "Turn left at the corner", translation: "–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –ª—ñ–≤–æ—Ä—É—á –Ω–∞ —Ä–æ–∑—ñ" },
            { phrase: "Turn right at the traffic light", translation: "–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –ø—Ä–∞–≤–æ—Ä—É—á –Ω–∞ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ" },
            { phrase: "It's next to the bank", translation: "–¶–µ –ø–æ—Ä—É—á –∑ –±–∞–Ω–∫–æ–º" },
            { phrase: "It's opposite the park", translation: "–¶–µ –Ω–∞–≤–ø—Ä–æ—Ç–∏ –ø–∞—Ä–∫—É" },
            { phrase: "Is this the right way?", translation: "–¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö?" },
            { phrase: "How long does it take to walk there?", translation: "–°–∫—ñ–ª—å–∫–∏ –π—Ç–∏ –ø—ñ—à–∫–∏?" },
            { phrase: "Where is the crosswalk?", translation: "–î–µ –ø—ñ—à–æ—Ö—ñ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥?" },
            { phrase: "Is it near here?", translation: "–¶–µ –ø–æ—Ä—É—á?" },
            { phrase: "Which bus goes to the station?", translation: "–Ø–∫–∏–π –∞–≤—Ç–æ–±—É—Å —ó–¥–µ –¥–æ —Å—Ç–∞–Ω—Ü—ñ—ó?" },
            { phrase: "Can you write down the address?", translation: "–ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏ –∞–¥—Ä–µ—Å—É?" },
            { phrase: "Is there a shortcut?", translation: "–Ñ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö?" },
            { phrase: "Where am I on this map?", translation: "–î–µ —è –Ω–∞ —Ü—ñ–π –∫–∞—Ä—Ç—ñ?" },
            { phrase: "How do I get to the museum?", translation: "–Ø–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ –º—É–∑–µ—é?" }
        ]
    },
    medical: {
        title: "–ú–µ–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞",
        icon: "üè•",
        words: [
            { word: "doctor", transcription: "[–¥–æ–∫—Ç–æ—Ä]", translation: "–ª—ñ–∫–∞—Ä" },
            { word: "pharmacy", transcription: "[—Ñ–∞—Ä–º–∞—Å—ñ]", translation: "–∞–ø—Ç–µ–∫–∞" },
            { word: "medicine", transcription: "[–º–µ–¥—ñ—Å—ñ–Ω]", translation: "–ª—ñ–∫–∏" },
            { word: "prescription", transcription: "[–ø—Ä—ñ—Å–∫—Ä—ñ–ø—à–Ω]", translation: "—Ä–µ—Ü–µ–ø—Ç" },
            { word: "pain", transcription: "[–ø–µ–π–Ω]", translation: "–±—ñ–ª—å" },
            { word: "headache", transcription: "[—Ö–µ–¥–µ–π–∫]", translation: "–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å" },
            { word: "fever", transcription: "[—Ñ—ñ–≤–µ—Ä]", translation: "–∂–∞—Ä" },
            { word: "cough", transcription: "[–∫–æ—Ñ]", translation: "–∫–∞—à–µ–ª—å" },
            { word: "cold", transcription: "[–∫–æ–ª–¥]", translation: "–∑–∞—Å—Ç—É–¥–∞" },
            { word: "allergy", transcription: "[–∞–ª–µ—Ä–¥–∂—ñ]", translation: "–∞–ª–µ—Ä–≥—ñ—è" },
            { word: "injury", transcription: "[—ñ–Ω–¥–∂–µ—Ä—ñ]", translation: "—Ç—Ä–∞–≤–º–∞" },
            { word: "ambulance", transcription: "[–µ–º–±—é–ª–µ–Ω—Å]", translation: "—à–≤–∏–¥–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞" },
            { word: "hospital", transcription: "[—Ö–æ—Å–ø—ñ—Ç–∞–ª]", translation: "–ª—ñ–∫–∞—Ä–Ω—è" },
            { word: "clinic", transcription: "[–∫–ª—ñ–Ω—ñ–∫]", translation: "–∫–ª—ñ–Ω—ñ–∫–∞" },
            { word: "insurance", transcription: "[—ñ–Ω—à—É—Ä–µ–Ω—Å]", translation: "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è" },
            { word: "appointment", transcription: "[–µ–ø–æ–π–Ω—Ç–º–µ–Ω—Ç]", translation: "–∑–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º" },
            { word: "emergency", transcription: "[–µ–º–µ—Ä–¥–∂–µ–Ω—Å—ñ]", translation: "–Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è" },
            { word: "bandage", transcription: "[–±–µ–Ω–¥—ñ–¥–∂]", translation: "–±–∏–Ω—Ç" }
        ],
        phrases: [
            { phrase: "I need a doctor", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ª—ñ–∫–∞—Ä" },
            { phrase: "Where is the nearest pharmacy?", translation: "–î–µ –Ω–∞–π–±–ª–∏–∂—á–∞ –∞–ø—Ç–µ–∫–∞?" },
            { phrase: "I have a headache", translation: "–£ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å –≥–æ–ª–æ–≤–∞" },
            { phrase: "Do you have something for a cold?", translation: "–£ –≤–∞—Å —î —â–æ—Å—å –≤—ñ–¥ –∑–∞—Å—Ç—É–¥–∏?" },
            { phrase: "I am allergic to penicillin", translation: "–£ –º–µ–Ω–µ –∞–ª–µ—Ä–≥—ñ—è –Ω–∞ –ø–µ–Ω—ñ—Ü–∏–ª—ñ–Ω" },
            { phrase: "Can I get this medicine without a prescription?", translation: "–ú–æ–∂–Ω–∞ —Ü—ñ –ª—ñ–∫–∏ –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞?" },
            { phrase: "I need an ambulance", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —à–≤–∏–¥–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞" },
            { phrase: "Where is the hospital?", translation: "–î–µ –ª—ñ–∫–∞—Ä–Ω—è?" },
            { phrase: "I have travel insurance", translation: "–£ –º–µ–Ω–µ —î —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞" },
            { phrase: "I have an appointment", translation: "–£ –º–µ–Ω–µ –∑–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º" },
            { phrase: "Is there a clinic nearby?", translation: "–Ñ –∫–ª—ñ–Ω—ñ–∫–∞ –ø–æ—Ä—É—á?" },
            { phrase: "Can you help me?", translation: "–í–∏ –º–æ–∂–µ—Ç–µ –º–µ–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏?" }
        ]
    },
    entertainment: {
        title: "–†–æ–∑–≤–∞–≥–∏",
        icon: "üé≠",
        words: [
            { word: "entertainment", transcription: "[–µ–Ω—Ç–µ—Ä—Ç–µ–π–Ω–º–µ–Ω—Ç]", translation: "—Ä–æ–∑–≤–∞–≥–∏" },
            { word: "excursion", transcription: "[–µ–∫—Å–∫—å–æ—Ä—à–Ω]", translation: "–µ–∫—Å–∫—É—Ä—Å—ñ—è" },
            { word: "tour", transcription: "[—Ç—É—Ä]", translation: "—Ç—É—Ä" },
            { word: "museum", transcription: "[–º'—é–∑—ñ—É–º]", translation: "–º—É–∑–µ–π" },
            { word: "theater", transcription: "[—Å—ñ–µ—Ç–µ—Ä]", translation: "—Ç–µ–∞—Ç—Ä" },
            { word: "cinema", transcription: "[—Å—ñ–Ω–µ–º–∞]", translation: "–∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä" },
            { word: "concert", transcription: "[–∫–æ–Ω—Å–µ—Ä—Ç]", translation: "–∫–æ–Ω—Ü–µ—Ä—Ç" },
            { word: "festival", transcription: "[—Ñ–µ—Å—Ç–∏–≤–∞–ª]", translation: "—Ñ–µ—Å—Ç–∏–≤–∞–ª—å" },
            { word: "event", transcription: "[—ñ–≤–µ–Ω—Ç]", translation: "–ø–æ–¥—ñ—è" },
            { word: "ticket", transcription: "[—Ç—ñ–∫–µ—Ç]", translation: "–∫–≤–∏—Ç–æ–∫" },
            { word: "performance", transcription: "[–ø–µ—Ä—Ñ–æ—Ä–º–µ–Ω—Å]", translation: "–≤–∏—Å—Ç–∞–≤–∞" },
            { word: "gallery", transcription: "[–≥–µ–ª–µ—Ä—ñ]", translation: "–≥–∞–ª–µ—Ä–µ—è" },
            { word: "exhibition", transcription: "[–µ–∫–∑–∏–±—ñ—à–Ω]", translation: "–≤–∏—Å—Ç–∞–≤–∫–∞" },
            { word: "guide", transcription: "[–≥–∞–π–¥]", translation: "–≥—ñ–¥" },
            { word: "souvenir", transcription: "[—Å—É–≤–µ–Ω—ñ—Ä]", translation: "—Å—É–≤–µ–Ω—ñ—Ä" },
            { word: "photo", transcription: "[—Ñ–æ—Ç–æ]", translation: "—Ñ–æ—Ç–æ" },
            { word: "show", transcription: "[—à–æ—É]", translation: "—à–æ—É" },
            { word: "amusement park", transcription: "[–∞–º'—é–∑–º–µ–Ω—Ç –ø–∞—Ä–∫]", translation: "–ø–∞—Ä–∫ —Ä–æ–∑–≤–∞–≥" },
            { word: "zoo", transcription: "[–∑—É]", translation: "–∑–æ–æ–ø–∞—Ä–∫" },
            { word: "aquarium", transcription: "[–∞–∫–≤–∞—Ä—ñ—É–º]", translation: "–∞–∫–≤–∞—Ä—ñ—É–º" },
            { word: "boat trip", transcription: "[–±–æ—É—Ç —Ç—Ä—ñ–ø]", translation: "–ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –Ω–∞ —á–æ–≤–Ω—ñ" },
            { word: "sightseeing", transcription: "[—Å–∞–π—Ç—Å—ñ—ó–Ω–≥]", translation: "–æ–≥–ª—è–¥ –≤–∏–∑–Ω–∞—á–Ω–∏—Ö –º—ñ—Å—Ü—å" }
        ],
        phrases: [
            { phrase: "What events are happening today?", translation: "–Ø–∫—ñ –ø–æ–¥—ñ—ó —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è?" },
            { phrase: "Where can I buy tickets?", translation: "–î–µ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–∫–∏?" },
            { phrase: "Is there a guided tour?", translation: "–Ñ –µ–∫—Å–∫—É—Ä—Å—ñ—è –∑ –≥—ñ–¥–æ–º?" },
            { phrase: "What time does the show start?", translation: "–û –∫–æ—Ç—Ä—ñ–π –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —à–æ—É?" },
            { phrase: "How much is the entrance fee?", translation: "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –≤—Ö—ñ–¥?" },
            { phrase: "Are photos allowed?", translation: "–ú–æ–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–≤–∞—Ç–∏?" },
            { phrase: "Where is the museum?", translation: "–î–µ –º—É–∑–µ–π?" },
            { phrase: "Is there a festival this week?", translation: "–Ñ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è?" },
            { phrase: "Can I get a program?", translation: "–ú–æ–∂–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º—É?" },
            { phrase: "How long is the performance?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –≤–∏—Å—Ç–∞–≤–∞?" },
            { phrase: "Where is the nearest cinema?", translation: "–î–µ –Ω–∞–π–±–ª–∏–∂—á–∏–π –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä?" },
            { phrase: "Is there a discount for students?", translation: "–Ñ –∑–Ω–∏–∂–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤?" },
            { phrase: "What is the best sightseeing tour?", translation: "–Ø–∫–∏–π –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç—É—Ä –ø–æ –º—ñ—Å—Ç—É?" },
            { phrase: "Where can I buy souvenirs?", translation: "–î–µ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —Å—É–≤–µ–Ω—ñ—Ä–∏?" },
            { phrase: "Is the amusement park open?", translation: "–ü–∞—Ä–∫ —Ä–æ–∑–≤–∞–≥ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π?" },
            { phrase: "Can I join the excursion?", translation: "–ú–æ–∂–Ω–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –µ–∫—Å–∫—É—Ä—Å—ñ—ó?" },
            { phrase: "Where is the entrance?", translation: "–î–µ –≤—Ö—ñ–¥?" },
            { phrase: "What time does it close?", translation: "–û –∫–æ—Ç—Ä—ñ–π –∑–∞—á–∏–Ω—è—î—Ç—å—Å—è?" },
            { phrase: "Is there a boat trip available?", translation: "–Ñ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –Ω–∞ —á–æ–≤–Ω—ñ?" }
        ]
    },
    money: {
        title: "–ë–∞–Ω–∫ —Ç–∞ –≥—Ä–æ—à—ñ",
        icon: "üí≥",
        words: [
            { word: "bank", transcription: "[–±–∞–Ω–∫]", translation: "–±–∞–Ω–∫" },
            { word: "money", transcription: "[–º–∞–Ω—ñ]", translation: "–≥—Ä–æ—à—ñ" },
            { word: "cash", transcription: "[–∫–µ—à]", translation: "–≥–æ—Ç—ñ–≤–∫–∞" },
            { word: "credit card", transcription: "[–∫—Ä–µ–¥–∏—Ç –∫–∞—Ä–¥]", translation: "–∫—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∫–∞" },
            { word: "debit card", transcription: "[–¥–µ–±—ñ—Ç –∫–∞—Ä–¥]", translation: "–¥–µ–±–µ—Ç–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞" },
            { word: "ATM", transcription: "[–µ–π —Ç—ñ –µ–º]", translation: "–±–∞–Ω–∫–æ–º–∞—Ç" },
            { word: "exchange", transcription: "[—ñ–∫—Å—á–µ–π–Ω–¥–∂]", translation: "–æ–±–º—ñ–Ω" },
            { word: "currency", transcription: "[–∫–∞—Ä–µ–Ω—Å—ñ]", translation: "–≤–∞–ª—é—Ç–∞" },
            { word: "rate", transcription: "[—Ä–µ–π—Ç]", translation: "–∫—É—Ä—Å" },
            { word: "account", transcription: "[–µ–∫–∞—É–Ω—Ç]", translation: "—Ä–∞—Ö—É–Ω–æ–∫" },
            { word: "transfer", transcription: "[—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä]", translation: "–ø–µ—Ä–µ–∫–∞–∑" },
            { word: "deposit", transcription: "[–¥–µ–ø–æ–∑–∏—Ç]", translation: "–¥–µ–ø–æ–∑–∏—Ç" },
            { word: "withdraw", transcription: "[–≤—ñ–∑–¥—Ä–æ—É]", translation: "–∑–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ" },
            { word: "balance", transcription: "[–±–µ–ª–µ–Ω—Å]", translation: "–±–∞–ª–∞–Ω—Å" },
            { word: "fee", transcription: "[—Ñ—ñ]", translation: "–∫–æ–º—ñ—Å—ñ—è" },
            { word: "safe", transcription: "[—Å–µ–π—Ñ]", translation: "—Å–µ–π—Ñ" }
        ],
        phrases: [
            { phrase: "Where is the nearest ATM?", translation: "–î–µ –Ω–∞–π–±–ª–∏–∂—á–∏–π –±–∞–Ω–∫–æ–º–∞—Ç?" },
            { phrase: "Can I exchange money here?", translation: "–ú–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ —Ç—É—Ç?" },
            { phrase: "What is the exchange rate?", translation: "–Ø–∫–∏–π –∫—É—Ä—Å –æ–±–º—ñ–Ω—É?" },
            { phrase: "Can I pay by card?", translation: "–ú–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é?" },
            { phrase: "I would like to withdraw cash", translation: "–Ø —Ö–æ—Ç—ñ–≤ –±–∏ –∑–Ω—è—Ç–∏ –≥–æ—Ç—ñ–≤–∫—É" },
            { phrase: "Is there a fee for this transaction?", translation: "–Ñ –∫–æ–º—ñ—Å—ñ—è –∑–∞ —Ü—é –æ–ø–µ—Ä–∞—Ü—ñ—é?" },
            { phrase: "Can I open a bank account?", translation: "–ú–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫?" },
            { phrase: "Where can I transfer money?", translation: "–î–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ –≥—Ä–æ—à—ñ?" },
            { phrase: "Is my card accepted here?", translation: "–ú–æ—è –∫–∞—Ä—Ç–∫–∞ –ø—Ä–∏–π–º–∞—î—Ç—å—Å—è —Ç—É—Ç?" },
            { phrase: "Can I check my balance?", translation: "–ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å?" },
            { phrase: "Where is the bank?", translation: "–î–µ –±–∞–Ω–∫?" },
            { phrase: "Can I get a receipt?", translation: "–ú–æ–∂–Ω–∞ —á–µ–∫?" },
            { phrase: "Is there a safe in the room?", translation: "–£ –Ω–æ–º–µ—Ä—ñ —î —Å–µ–π—Ñ?" },
            { phrase: "Can I deposit money?", translation: "–ú–æ–∂–Ω–∞ –ø–æ–∫–ª–∞—Å—Ç–∏ –≥—Ä–æ—à—ñ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫?" }
        ]
    },
    communication: {
        title: "–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è",
        icon: "üì±",
        words: [
            { word: "phone", transcription: "[—Ñ–æ–Ω]", translation: "—Ç–µ–ª–µ—Ñ–æ–Ω" },
            { word: "call", transcription: "[–∫–æ–ª]", translation: "–¥–∑–≤—ñ–Ω–æ–∫" },
            { word: "message", transcription: "[–º–µ—Å—ñ–¥–∂]", translation: "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" },
            { word: "internet", transcription: "[—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç]", translation: "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç" },
            { word: "wifi", transcription: "[–≤–∞–π—Ñ–∞–π]", translation: "–≤–∞–π—Ñ–∞–π" },
            { word: "SIM card", transcription: "[—Å—ñ–º –∫–∞—Ä–¥]", translation: "SIM-–∫–∞—Ä—Ç–∫–∞" },
            { word: "number", transcription: "[–Ω–∞–º–±–µ—Ä]", translation: "–Ω–æ–º–µ—Ä" },
            { word: "contact", transcription: "[–∫–æ–Ω—Ç–∞–∫—Ç]", translation: "–∫–æ–Ω—Ç–∞–∫—Ç" },
            { word: "email", transcription: "[—ñ–º–µ–π–ª]", translation: "–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞" },
            { word: "app", transcription: "[–µ–ø]", translation: "–¥–æ–¥–∞—Ç–æ–∫" },
            { word: "chat", transcription: "[—á–∞—Ç]", translation: "—á–∞—Ç" },
            { word: "video call", transcription: "[–≤—ñ–¥–µ–æ –∫–æ–ª]", translation: "–≤—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–æ–∫" },
            { word: "roaming", transcription: "[—Ä–æ—É–º—ñ–Ω–≥]", translation: "—Ä–æ—É–º—ñ–Ω–≥" },
            { word: "signal", transcription: "[—Å–∏–≥–Ω–∞–ª]", translation: "—Å–∏–≥–Ω–∞–ª" },
            { word: "charger", transcription: "[—á–∞—Ä–¥–∂–µ—Ä]", translation: "–∑–∞—Ä—è–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π" },
            { word: "battery", transcription: "[–±–µ—Ç–µ—Ä—ñ]", translation: "–±–∞—Ç–∞—Ä–µ—è" },
            { word: "data", transcription: "[–¥–∞—Ç–∞]", translation: "–¥–∞–Ω—ñ" },
            { word: "password", transcription: "[–ø–∞—Å–≤–æ—Ä–¥]", translation: "–ø–∞—Ä–æ–ª—å" },
            { word: "screen", transcription: "[—Å–∫—Ä—ñ–Ω]", translation: "–µ–∫—Ä–∞–Ω" }
        ],
        phrases: [
            { phrase: "Can I use your phone?", translation: "–ú–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –≤–∞—à–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º?" },
            { phrase: "What is your phone number?", translation: "–Ø–∫–∏–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?" },
            { phrase: "Is there free wifi here?", translation: "–¢—É—Ç —î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≤–∞–π—Ñ–∞–π?" },
            { phrase: "Can I buy a SIM card?", translation: "–ú–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ SIM-–∫–∞—Ä—Ç–∫—É?" },
            { phrase: "Do you have internet access?", translation: "–£ –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É?" },
            { phrase: "Can I charge my phone here?", translation: "–ú–æ–∂–Ω–∞ –∑–∞—Ä—è–¥–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç—É—Ç?" },
            { phrase: "What is the wifi password?", translation: "–Ø–∫–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞–π—Ñ–∞—é?" },
            { phrase: "I have no signal", translation: "–£ –º–µ–Ω–µ –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É" },
            { phrase: "Can I send a message?", translation: "–ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?" },
            { phrase: "Is there a public phone?", translation: "–Ñ –≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω?" },
            { phrase: "Can I make a call?", translation: "–ú–æ–∂–Ω–∞ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏?" },
            { phrase: "Do you use WhatsApp?", translation: "–í–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å WhatsApp?" },
            { phrase: "Can I connect to the internet?", translation: "–ú–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É?" },
            { phrase: "Is roaming available?", translation: "–†–æ—É–º—ñ–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–∏–π?" },
            { phrase: "Can I get your contact?", translation: "–ú–æ–∂–Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç?" }
        ]
    },
    emergency: {
        title: "–ù–∞–¥–∑–≤–∏—á–∞–π–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó",
        icon: "üö®",
        words: [
            { word: "emergency", transcription: "[–µ–º–µ—Ä–¥–∂–µ–Ω—Å—ñ]", translation: "–Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è" },
            { word: "help", transcription: "[—Ö–µ–ª–ø]", translation: "–¥–æ–ø–æ–º–æ–≥–∞" },
            { word: "police", transcription: "[–ø–æ–ª—ñ—Å]", translation: "–ø–æ–ª—ñ—Ü—ñ—è" },
            { word: "fire", transcription: "[—Ñ–∞—î—Ä]", translation: "–ø–æ–∂–µ–∂–∞" },
            { word: "ambulance", transcription: "[–µ–º–±—é–ª–µ–Ω—Å]", translation: "—à–≤–∏–¥–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞" },
            { word: "accident", transcription: "[–µ–∫—Å—ñ–¥–µ–Ω—Ç]", translation: "–∞–≤–∞—Ä—ñ—è" },
            { word: "theft", transcription: "[—Ç–µ—Ñ—Ç]", translation: "–∫—Ä–∞–¥—ñ–∂–∫–∞" },
            { word: "lost", transcription: "[–ª–æ—Å—Ç]", translation: "–∑–∞–≥—É–±–ª–µ–Ω–∏–π" },
            { word: "danger", transcription: "[–¥–µ–π–Ω–¥–∂–µ—Ä]", translation: "–Ω–µ–±–µ–∑–ø–µ–∫–∞" },
            { word: "safe", transcription: "[—Å–µ–π—Ñ]", translation: "–±–µ–∑–ø–µ—á–Ω–∏–π" },
            { word: "injury", transcription: "[—ñ–Ω–¥–∂–µ—Ä—ñ]", translation: "—Ç—Ä–∞–≤–º–∞" },
            { word: "firefighter", transcription: "[—Ñ–∞—î—Ä—Ñ–∞–π—Ç–µ—Ä]", translation: "–ø–æ–∂–µ–∂–Ω–∏–∫" },
            { word: "emergency exit", transcription: "[–µ–º–µ—Ä–¥–∂–µ–Ω—Å—ñ –µ–≥–∑–∏—Ç]", translation: "–∞–≤–∞—Ä—ñ–π–Ω–∏–π –≤–∏—Ö—ñ–¥" },
            { word: "first aid", transcription: "[—Ñ–µ—Ä—Å—Ç –µ–π–¥]", translation: "–ø–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞" },
            { word: "insurance", transcription: "[—ñ–Ω—à—É—Ä–µ–Ω—Å]", translation: "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è" }
        ],
        phrases: [
            { phrase: "Help! Call the police!", translation: "–î–æ–ø–æ–º–æ–∂—ñ—Ç—å! –í–∏–∫–ª–∏—á—Ç–µ –ø–æ–ª—ñ—Ü—ñ—é!" },
            { phrase: "I need an ambulance", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —à–≤–∏–¥–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞" },
            { phrase: "There is a fire", translation: "–¢—É—Ç –ø–æ–∂–µ–∂–∞" },
            { phrase: "I have lost my passport", translation: "–Ø –∑–∞–≥—É–±–∏–≤ –ø–∞—Å–ø–æ—Ä—Ç" },
            { phrase: "My bag was stolen", translation: "–ú—ñ–π —Ä—é–∫–∑–∞–∫ –≤–∫—Ä–∞–ª–∏" },
            { phrase: "Is everyone safe?", translation: "–í—Å—ñ –≤ –±–µ–∑–ø–µ—Ü—ñ?" },
            { phrase: "Where is the emergency exit?", translation: "–î–µ –∞–≤–∞—Ä—ñ–π–Ω–∏–π –≤–∏—Ö—ñ–¥?" },
            { phrase: "I had an accident", translation: "–Ø –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –∞–≤–∞—Ä—ñ—é" },
            { phrase: "Can you help me?", translation: "–í–∏ –º–æ–∂–µ—Ç–µ –º–µ–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏?" },
            { phrase: "What is the emergency number?", translation: "–Ø–∫–∏–π –Ω–æ–º–µ—Ä –µ–∫—Å—Ç—Ä–µ–Ω–æ—ó —Å–ª—É–∂–±–∏?" }
        ]
    },
    weather: {
        title: "–ü–æ–≥–æ–¥–∞ —Ç–∞ —á–∞—Å",
        icon: "üå§Ô∏è",
        words: [
            { word: "weather", transcription: "[–≤–µ–∑–µ—Ä]", translation: "–ø–æ–≥–æ–¥–∞" },
            { word: "sun", transcription: "[—Å–∞–Ω]", translation: "—Å–æ–Ω—Ü–µ" },
            { word: "rain", transcription: "[—Ä–µ–π–Ω]", translation: "–¥–æ—â" },
            { word: "cloud", transcription: "[–∫–ª–∞—É–¥]", translation: "—Ö–º–∞—Ä–∞" },
            { word: "wind", transcription: "[–≤—ñ–Ω–¥]", translation: "–≤—ñ—Ç–µ—Ä" },
            { word: "snow", transcription: "[—Å–Ω–æ—É]", translation: "—Å–Ω—ñ–≥" },
            { word: "storm", transcription: "[—Å—Ç–æ—Ä–º]", translation: "–±—É—Ä—è" },
            { word: "fog", transcription: "[—Ñ–æ–≥]", translation: "—Ç—É–º–∞–Ω" },
            { word: "temperature", transcription: "[—Ç–µ–º–ø–µ—Ä–∞—á–µ]", translation: "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" },
            { word: "degree", transcription: "[–¥—ñ–≥—Ä—ñ]", translation: "–≥—Ä–∞–¥—É—Å" },
            { word: "hot", transcription: "[—Ö–æ—Ç]", translation: "—Å–ø–µ–∫–æ—Ç–Ω–æ" },
            { word: "cold", transcription: "[–∫–æ–ª–¥]", translation: "—Ö–æ–ª–æ–¥–Ω–æ" },
            { word: "warm", transcription: "[–≤–æ—Ä–º]", translation: "—Ç–µ–ø–ª–æ" },
            { word: "cool", transcription: "[–∫—É–ª]", translation: "–ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ" },
            { word: "forecast", transcription: "[—Ñ–æ—Ä–∫–∞—Å—Ç]", translation: "–ø—Ä–æ–≥–Ω–æ–∑" },
            { word: "season", transcription: "[—Å—ñ–∑–æ–Ω]", translation: "—Å–µ–∑–æ–Ω" },
            { word: "spring", transcription: "[—Å–ø—Ä—ñ–Ω–≥]", translation: "–≤–µ—Å–Ω–∞" },
            { word: "summer", transcription: "[—Å–∞–º–µ—Ä]", translation: "–ª—ñ—Ç–æ" },
            { word: "autumn", transcription: "[–æ—Ç—É–º–Ω]", translation: "–æ—Å—ñ–Ω—å" },
            { word: "winter", transcription: "[–≤—ñ–Ω—Ç–µ—Ä]", translation: "–∑–∏–º–∞" },
            { word: "time", transcription: "[—Ç–∞–π–º]", translation: "—á–∞—Å" }
        ],
        phrases: [
            { phrase: "What is the weather like today?", translation: "–Ø–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ–≥–æ–¥–∞?" },
            { phrase: "Is it going to rain?", translation: "–ë—É–¥–µ –¥–æ—â?" },
            { phrase: "How hot is it?", translation: "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Å–ø–µ–∫–æ—Ç–Ω–æ?" },
            { phrase: "What is the temperature?", translation: "–Ø–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?" },
            { phrase: "Is it cold outside?", translation: "–ù–∞ –≤—É–ª–∏—Ü—ñ —Ö–æ–ª–æ–¥–Ω–æ?" },
            { phrase: "Do I need an umbrella?", translation: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–∞—Ä–∞—Å–æ–ª—è?" },
            { phrase: "What time is it?", translation: "–ö–æ—Ç—Ä–∞ –≥–æ–¥–∏–Ω–∞?" },
            { phrase: "When does the sun set?", translation: "–ö–æ–ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å —Å–æ–Ω—Ü–µ?" },
            { phrase: "Is it windy today?", translation: "–°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ—Ç—Ä—è–Ω–æ?" },
            { phrase: "What is the forecast for tomorrow?", translation: "–Ø–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?" },
            { phrase: "How long does it take?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ü–µ –∑–∞–π–º–∞—î —á–∞—Å—É?" },
            { phrase: "What season is it now?", translation: "–Ø–∫–∞ –∑–∞—Ä–∞–∑ –ø–æ—Ä–∞ —Ä–æ–∫—É?" },
            { phrase: "Is it snowing?", translation: "–ô–¥–µ —Å–Ω—ñ–≥?" },
            { phrase: "How many degrees is it?", translation: "–°–∫—ñ–ª—å–∫–∏ –≥—Ä–∞–¥—É—Å—ñ–≤?" },
            { phrase: "Is it foggy?", translation: "–¢—É–º–∞–Ω–Ω–æ?" },
            { phrase: "What day is it today?", translation: "–Ø–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å?" }
        ]
    },
    departure: {
        title: "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        icon: "üéí",
        words: [
            { word: "departure", transcription: "[–¥—ñ–ø–∞—Ä—á–µ]", translation: "–≤—ñ–¥'—ó–∑–¥" },
            { word: "return", transcription: "[—Ä—ñ—Ç—å–æ—Ä–Ω]", translation: "–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" },
            { word: "customs", transcription: "[–∫–∞—Å—Ç–º–∑]", translation: "–º–∏—Ç–Ω–∏—Ü—è" },
            { word: "passport", transcription: "[–ø–∞—Å–ø–æ—Ä—Ç]", translation: "–ø–∞—Å–ø–æ—Ä—Ç" },
            { word: "ticket", transcription: "[—Ç—ñ–∫–µ—Ç]", translation: "–∫–≤–∏—Ç–æ–∫" },
            { word: "luggage", transcription: "[–ª–∞–≥—ñ–¥–∂]", translation: "–±–∞–≥–∞–∂" },
            { word: "souvenir", transcription: "[—Å—É–≤–µ–Ω—ñ—Ä]", translation: "—Å—É–≤–µ–Ω—ñ—Ä" },
            { word: "gate", transcription: "[–≥–µ–π—Ç]", translation: "–≤–∏—Ö—ñ–¥" },
            { word: "flight", transcription: "[—Ñ–ª–∞–π—Ç]", translation: "—Ä–µ–π—Å" },
            { word: "delay", transcription: "[–¥—ñ–ª–µ–π]", translation: "–∑–∞—Ç—Ä–∏–º–∫–∞" },
            { word: "security", transcription: "[—Å—ñ–∫—å—é—Ä—ñ—Ç—ñ]", translation: "–±–µ–∑–ø–µ–∫–∞" },
            { word: "check-in", transcription: "[—á–µ–∫ —ñ–Ω]", translation: "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" },
            { word: "boarding", transcription: "[–±–æ—Ä–¥—ñ–Ω–≥]", translation: "–ø–æ—Å–∞–¥–∫–∞" },
            { word: "terminal", transcription: "[—Ç–µ—Ä–º—ñ–Ω–∞–ª]", translation: "—Ç–µ—Ä–º—ñ–Ω–∞–ª" },
            { word: "arrival", transcription: "[–µ—Ä–∞–π–≤–∞–ª]", translation: "–ø—Ä–∏–±—É—Ç—Ç—è" },
            { word: "farewell", transcription: "[—Ñ–µ—Ä–≤–µ–ª]", translation: "–ø—Ä–æ—â–∞–Ω–Ω—è" }
        ],
        phrases: [
            { phrase: "What time is my departure?", translation: "–û –∫–æ—Ç—Ä—ñ–π –º—ñ–π –≤—ñ–¥'—ó–∑–¥?" },
            { phrase: "Where is the check-in desk?", translation: "–î–µ —Å—Ç—ñ–π–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó?" },
            { phrase: "Do I need to go through customs?", translation: "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –º–∏—Ç–Ω–∏—Ü—é?" },
            { phrase: "Is my flight on time?", translation: "–ú—ñ–π —Ä–µ–π—Å –≤—á–∞—Å–Ω–æ?" },
            { phrase: "Where can I buy souvenirs?", translation: "–î–µ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —Å—É–≤–µ–Ω—ñ—Ä–∏?" },
            { phrase: "Can I get a tax refund?", translation: "–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫?" },
            { phrase: "Where is the boarding gate?", translation: "–î–µ –≤–∏—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∞–¥–∫—É?" },
            { phrase: "How long is the flight?", translation: "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –ø–æ–ª—ñ—Ç?" },
            { phrase: "Is there a delay?", translation: "–Ñ –∑–∞—Ç—Ä–∏–º–∫–∞?" },
            { phrase: "Can I have a window seat?", translation: "–ú–æ–∂–Ω–∞ –º—ñ—Å—Ü–µ –±—ñ–ª—è –≤—ñ–∫–Ω–∞?" },
            { phrase: "Where is passport control?", translation: "–î–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å?" },
            { phrase: "Is there a direct flight?", translation: "–Ñ –ø—Ä—è–º–∏–π —Ä–µ–π—Å?" },
            { phrase: "Can I check my luggage?", translation: "–ú–æ–∂–Ω–∞ –∑–¥–∞—Ç–∏ –±–∞–≥–∞–∂?" }
        ]
    }
};

// Show words modal (mobile optimized)
function viewWords(situation) {
    console.log('üîç viewWords called with situation:', situation);
    console.log('üìö vocabularyData available:', Object.keys(vocabularyData));
    
    // Mobile detection
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                     window.innerWidth <= 768;
    
    if (!vocabularyData[situation]) {
        console.error('‚ùå Situation not found:', situation);
        console.log('‚úÖ Available situations:', Object.keys(vocabularyData));
        
        // Mobile-friendly error message
        if (isMobile) {
            alert(`–°–∏—Ç—É–∞—Ü—ñ—è "${situation}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`);
        } else {
            alert(`–°–∏—Ç—É–∞—Ü—ñ—è "${situation}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ñ: ${Object.keys(vocabularyData).join(', ')}`);
        }
        return;
    }
    
    const data = vocabularyData[situation];
    console.log('Data loaded for situation:', situation, data);
    
    // Create modal HTML
    const modalHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-2 sm:p-4 bg-black/50 backdrop-blur-sm" onclick="closeModal(event)">
            <div class="bg-black/90 rounded-2xl sm:rounded-3xl p-4 sm:p-8 max-w-4xl w-full max-h-[95vh] sm:max-h-[80vh] overflow-y-auto glass border border-white/20" onclick="event.stopPropagation()" style="touch-action: pan-y;">
                <!-- Header -->
                <div class="flex items-center justify-between mb-4 sm:mb-6">
                    <div class="flex items-center gap-2 sm:gap-4">
                        <div class="text-2xl sm:text-4xl">${data.icon}</div>
                        <h2 class="text-lg sm:text-3xl font-bold text-white">${data.title}</h2>
                    </div>
                    <button class="text-white/60 hover:text-white text-xl sm:text-2xl p-2 min-w-[44px] min-h-[44px] flex items-center justify-center" onclick="closeModal()">√ó</button>
                </div>
                
                <!-- Tabs -->
                <div class="flex gap-2 sm:gap-4 mb-4 sm:mb-6">
                    <button class="tab-btn active px-3 sm:px-6 py-2 sm:py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold transition-all" data-tab="words">
                        üìö –°–ª–æ–≤–∞ (${data.words.length})
                    </button>
                    <button class="tab-btn px-3 sm:px-6 py-2 sm:py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold transition-all" data-tab="phrases">
                        üí¨ –§—Ä–∞–∑–∏ (${data.phrases.length})
                    </button>
                </div>
                
                <!-- Words Content -->
                <div class="tab-content" id="words-content">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
                        ${data.words.map(item => `
                            <div class="word-card glass rounded-xl sm:rounded-2xl p-3 sm:p-4 border border-white/10 hover:border-white/20 transition-all">
                                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 sm:gap-0">
                                    <div>
                                        <div class="text-white font-semibold text-base sm:text-lg">${item.word}</div>
                                        <div class="text-purple-400 text-xs sm:text-sm">${item.transcription}</div>
                                    </div>
                                    <div class="text-white/70 text-sm sm:text-base sm:text-right">${item.translation}</div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Phrases Content -->
                <div class="tab-content hidden" id="phrases-content">
                    <div class="space-y-3 sm:space-y-4">
                        ${data.phrases.map(item => `
                            <div class="phrase-card glass rounded-xl sm:rounded-2xl p-3 sm:p-4 border border-white/10 hover:border-white/20 transition-all">
                                <div class="text-white font-semibold mb-2 text-sm sm:text-base">"${item.phrase}"</div>
                                <div class="text-white/70 text-sm sm:text-base">"${item.translation}"</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Actions -->
                <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 mt-6 sm:mt-8">
                    <button class="btn-practice flex-1 px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold" onclick="practiceWords('${situation}')">
                        üéØ –ü—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏
                    </button>
                    <button class="btn-view px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold" onclick="closeModal()">
                        ‚úì –ì–æ—Ç–æ–≤–æ
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Add modal to page
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Mobile optimization: prevent body scroll when modal is open
    if (isMobile) {
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
    }
    
    // Add tab functionality with mobile optimizations
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabBtns.forEach(btn => {
        // Mobile-friendly tab switching
        const handleTabClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const tab = btn.dataset.tab;
            
            // Visual feedback for mobile
            if (isMobile) {
                btn.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    btn.style.transform = '';
                }, 100);
            }
            
            // Update active tab
            tabBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // Update content with smooth transition
            tabContents.forEach(content => {
                content.classList.add('hidden');
            });
            
            setTimeout(() => {
                document.getElementById(`${tab}-content`).classList.remove('hidden');
            }, 50);
        };
        
        btn.addEventListener('click', handleTabClick);
        
        // Touch events for mobile
        if (isMobile) {
            btn.addEventListener('touchend', function(e) {
                e.preventDefault();
                handleTabClick(e);
            }, { passive: false });
        }
    });
}

// Close modal (mobile optimized)
function closeModal(event) {
    console.log('closeModal called');
    if (event && event.target !== event.currentTarget) return;
    
    // Mobile detection
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                     window.innerWidth <= 768;
    
    const modals = document.querySelectorAll('.fixed[class*="z-50"]');
    console.log('Found modals:', modals.length);
    
    if (modals.length > 0) {
        // Restore body scroll on mobile
        if (isMobile) {
            document.body.style.overflow = '';
            document.body.style.position = '';
            document.body.style.width = '';
        }
        
        // Smooth close animation
        modals.forEach(modal => {
            if (isMobile) {
                modal.style.opacity = '0';
                modal.style.transform = 'scale(0.95)';
                setTimeout(() => modal.remove(), 200);
            } else {
                modal.remove();
            }
        });
    }
}

// Practice words
function practiceWords(situation) {
    console.log('practiceWords called with situation:', situation);
    console.log('vocabularyData available:', Object.keys(vocabularyData));
    
    if (!vocabularyData[situation]) {
        console.error('Situation not found:', situation);
        console.log('Available situations:', Object.keys(vocabularyData));
        return;
    }
    
    // Close current modal if open
    closeModal();
    
    const data = vocabularyData[situation];
    
    // Create practice selection modal
    const practiceModalHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-2 sm:p-4 bg-black/50 backdrop-blur-sm" onclick="closePracticeModal(event)">
            <div class="bg-black/90 rounded-2xl sm:rounded-3xl p-4 sm:p-8 max-w-2xl w-full glass border border-white/20" onclick="event.stopPropagation()" style="touch-action: pan-y;">
                <!-- Header -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-3 sm:gap-4">
                        <div class="text-3xl sm:text-4xl">${data.icon}</div>
                        <h2 class="text-xl sm:text-3xl font-bold text-white">–ü—Ä–∞–∫—Ç–∏–∫–∞: ${data.title}</h2>
                    </div>
                    <button class="text-white/60 hover:text-white text-2xl p-2 min-w-[44px] min-h-[44px] flex items-center justify-center" onclick="closePracticeModal()">√ó</button>
                </div>
                
                <!-- Practice Types -->
                <div class="space-y-3 sm:space-y-4 mb-6 sm:mb-8">
                    <div class="text-white/80 text-base sm:text-lg mb-4 sm:mb-6">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:</div>
                    
                    <!-- Flashcards -->
                    <div class="practice-option glass rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/10 hover:border-purple-400/50 transition-all cursor-pointer" onclick="startPractice('${situation}', 'flashcards')">
                        <div class="flex items-center gap-3 sm:gap-4">
                            <div class="text-2xl sm:text-4xl">üÉè</div>
                            <div class="flex-1">
                                <h3 class="text-lg sm:text-xl font-bold text-white">–ö–∞—Ä—Ç–∫–∏</h3>
                                <p class="text-white/70 text-sm sm:text-base">–ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞ —Ç–∞ —ó—Ö –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫–∞—Ä—Ç–æ–∫</p>
                                <p class="text-purple-400 text-xs sm:text-sm mt-1 sm:mt-2">üìö ${data.words.length} —Å–ª—ñ–≤ ‚Ä¢ ‚≠ê –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Multiple Choice -->
                    <div class="practice-option glass rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/10 hover:border-purple-400/50 transition-all cursor-pointer" onclick="startPractice('${situation}', 'quiz')">
                        <div class="flex items-center gap-3 sm:gap-4">
                            <div class="text-2xl sm:text-4xl">‚ùì</div>
                            <div class="flex-1">
                                <h3 class="text-lg sm:text-xl font-bold text-white">–¢–µ—Å—Ç –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏</h3>
                                <p class="text-white/70 text-sm sm:text-base">–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤</p>
                                <p class="text-purple-400 text-xs sm:text-sm mt-1 sm:mt-2">üéØ ${data.words.length} –ø–∏—Ç–∞–Ω—å ‚Ä¢ ‚≠ê‚≠ê –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Drag and Drop -->
                    <div class="practice-option glass rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/10 hover:border-purple-400/50 transition-all cursor-pointer" onclick="startPractice('${situation}', 'dragdrop')">
                        <div class="flex items-center gap-3 sm:gap-4">
                            <div class="text-2xl sm:text-4xl">üéØ</div>
                            <div class="flex-1">
                                <h3 class="text-lg sm:text-xl font-bold text-white">–î—Ä–∞–≥ –µ–Ω–¥ –¥—Ä–æ–ø</h3>
                                <p class="text-white/70 text-sm sm:text-base">–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Å–ª–æ–≤–∞ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤</p>
                                <p class="text-purple-400 text-xs sm:text-sm mt-1 sm:mt-2">üéÆ ${data.words.length} –ø–∞—Ä ‚Ä¢ ‚≠ê‚≠ê‚≠ê –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Footer -->
                <div class="flex gap-4">
                    <button class="btn-view flex-1 px-6 py-3 rounded-2xl font-semibold" onclick="closePracticeModal()">
                        ‚Üê –ù–∞–∑–∞–¥
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Add modal to page
    document.body.insertAdjacentHTML('beforeend', practiceModalHTML);
}

// Close practice selection modal
function closePracticeModal(event) {
    console.log('closePracticeModal called');
    if (event && event.target !== event.currentTarget) return;
    
    const modals = document.querySelectorAll('.fixed[class*="z-50"]');
    console.log('Found practice modals:', modals.length);
    
    if (modals.length > 0) {
        modals.forEach(modal => modal.remove());
    }
}

// Start specific practice type
function startPractice(situation, practiceType) {
    if (!vocabularyData[situation]) {
        console.error('Situation not found:', situation);
        return;
    }
    
    closePracticeModal();
    
    const data = vocabularyData[situation];
    let practiceData = [];
    
    // Prepare data based on practice type
    switch(practiceType) {
        case 'flashcards':
            startFlashcardsPractice(situation, data);
            break;
        case 'quiz':
            startQuizPractice(situation, data);
            break;
        case 'dragdrop':
            startDragDropPractice(situation, data);
            break;
        default:
            console.error('Unknown practice type:', practiceType);
    }
}

// Flashcards Practice (mobile optimized)
function startFlashcardsPractice(situation, data) {
    let currentIndex = 0;
    let showTranslation = false;
    
    // Mobile detection
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                     window.innerWidth <= 768;
    
    const flashcardsHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-2 sm:p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-2xl sm:rounded-3xl p-4 sm:p-8 max-w-2xl w-full glass border border-white/20">
                <!-- Header -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-4">
                        <div class="text-4xl">${data.icon}</div>
                        <h2 class="text-2xl font-bold text-white">–ö–∞—Ä—Ç–∫–∏: ${data.title}</h2>
                    </div>
                    <button class="text-white/60 hover:text-white text-2xl" onclick="endPractice()">√ó</button>
                </div>
                
                <!-- Progress -->
                <div class="mb-6">
                    <div class="flex justify-between text-white/70 text-sm mb-2">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å</span>
                        <span id="progress-text">1 / ${data.words.length}</span>
                    </div>
                    <div class="w-full bg-white/10 rounded-full h-2">
                        <div id="progress-bar" class="bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full transition-all" style="width: ${(1/data.words.length)*100}%"></div>
                    </div>
                </div>
                
                                 <!-- Flashcard -->
                 <div class="flashcard glass rounded-2xl sm:rounded-3xl p-6 sm:p-8 mb-4 sm:mb-6 min-h-[250px] sm:min-h-[300px] flex flex-col justify-center items-center text-center border border-white/10 transition-all">
                     <div id="card-front" class="card-side">
                         <div class="text-2xl sm:text-4xl font-bold text-white mb-3 sm:mb-4" id="word-text">${data.words[0].word}</div>
                         <div class="text-purple-400 text-base sm:text-lg" id="transcription-text">${data.words[0].transcription}</div>
                     </div>
                     <div id="card-back" class="card-side hidden">
                         <div class="text-2xl sm:text-4xl font-bold text-white mb-3 sm:mb-4" id="translation-text">${data.words[0].translation}</div>
                         <div class="text-white/70 text-base sm:text-lg" id="word-back">${data.words[0].word}</div>
                     </div>
                 </div>
                
                                 <!-- Controls -->
                 <div class="flex flex-col sm:flex-row gap-3 sm:gap-4">
                     <button id="prev-btn" class="px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all ${currentIndex === 0 ? 'opacity-50 cursor-not-allowed' : ''}" onclick="previousCard()" ${currentIndex === 0 ? 'disabled' : ''}>
                         ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è
                     </button>
                     <button class="flex-1 px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:from-purple-600 hover:to-blue-600 transition-all" onclick="flipCard()">
                         üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏
                     </button>
                     <button id="next-btn" class="px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl text-sm sm:text-base font-semibold bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all" onclick="nextCard()">
                         –ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí
                     </button>
                 </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', flashcardsHTML);
    
    // Store practice session data
    window.currentFlashcardSession = {
        situation: situation,
        data: data,
        currentIndex: 0,
        showTranslation: false,
        isMobile: isMobile
    };
    
    // Mobile optimizations
    if (isMobile) {
        document.body.style.overflow = 'hidden';
        
        // Add swipe gestures for mobile
        const flashcard = document.querySelector('.flashcard');
        let startX = 0;
        let startY = 0;
        
        flashcard.addEventListener('touchstart', function(e) {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        }, { passive: true });
        
        flashcard.addEventListener('touchend', function(e) {
            if (!startX || !startY) return;
            
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            
            const diffX = startX - endX;
            const diffY = startY - endY;
            
            // Horizontal swipe (next/previous card)
            if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
                if (diffX > 0) {
                    // Swipe left - next card
                    nextCard();
                } else {
                    // Swipe right - previous card
                    previousCard();
                }
            } 
            // Vertical swipe or tap (flip card)
            else if (Math.abs(diffY) < 30 && Math.abs(diffX) < 30) {
                flipCard();
            }
            
            startX = 0;
            startY = 0;
        }, { passive: true });
        
        // Double-tap to flip (additional mobile gesture)
        let lastTap = 0;
        flashcard.addEventListener('touchend', function(e) {
            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            if (tapLength < 500 && tapLength > 0) {
                flipCard();
            }
            lastTap = currentTime;
        });
    }
}

// Flashcard navigation functions
function flipCard() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    const frontSide = document.getElementById('card-front');
    const backSide = document.getElementById('card-back');
    
    session.showTranslation = !session.showTranslation;
    
    if (session.showTranslation) {
        frontSide.classList.add('hidden');
        backSide.classList.remove('hidden');
    } else {
        backSide.classList.add('hidden');
        frontSide.classList.remove('hidden');
    }
}

function nextCard() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    if (session.currentIndex < session.data.words.length - 1) {
        session.currentIndex++;
        session.showTranslation = false;
        updateFlashcard();
    } else {
        // Practice completed
        completePractice();
    }
}

function previousCard() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    if (session.currentIndex > 0) {
        session.currentIndex--;
        session.showTranslation = false;
        updateFlashcard();
    }
}

function updateFlashcard() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    const currentWord = session.data.words[session.currentIndex];
    
    // Update content
    document.getElementById('word-text').textContent = currentWord.word;
    document.getElementById('transcription-text').textContent = currentWord.transcription;
    document.getElementById('translation-text').textContent = currentWord.translation;
    document.getElementById('word-back').textContent = currentWord.word;
    
    // Update progress
    const progressText = `${session.currentIndex + 1} / ${session.data.words.length}`;
    document.getElementById('progress-text').textContent = progressText;
    document.getElementById('progress-bar').style.width = `${((session.currentIndex + 1) / session.data.words.length) * 100}%`;
    
    // Update navigation buttons
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (session.currentIndex === 0) {
        prevBtn.disabled = true;
        prevBtn.classList.add('opacity-50', 'cursor-not-allowed');
    } else {
        prevBtn.disabled = false;
        prevBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    }
    
    if (session.currentIndex === session.data.words.length - 1) {
        nextBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ ‚úì';
    } else {
        nextBtn.textContent = '–ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí';
    }
    
    // Reset card to front side
    document.getElementById('card-front').classList.remove('hidden');
    document.getElementById('card-back').classList.add('hidden');
}

// Quiz Practice
function startQuizPractice(situation, data) {
    let currentQuestionIndex = 0;
    let correctAnswers = 0;
    let totalQuestions = data.words.length;
    let userAnswers = [];
    
    // Shuffle words for random quiz order
    const shuffledWords = [...data.words].sort(() => Math.random() - 0.5);
    
    const quizHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-3xl p-8 max-w-2xl w-full glass border border-white/20">
                <!-- Header -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-4">
                        <div class="text-4xl">${data.icon}</div>
                        <h2 class="text-2xl font-bold text-white">–¢–µ—Å—Ç: ${data.title}</h2>
                    </div>
                    <button class="text-white/60 hover:text-white text-2xl" onclick="endPractice()">√ó</button>
                </div>
                
                <!-- Progress -->
                <div class="mb-6">
                    <div class="flex justify-between text-white/70 text-sm mb-2">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å</span>
                        <span id="quiz-progress-text">1 / ${totalQuestions}</span>
                    </div>
                    <div class="w-full bg-white/10 rounded-full h-2">
                        <div id="quiz-progress-bar" class="bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full transition-all" style="width: ${(1/totalQuestions)*100}%"></div>
                    </div>
                </div>
                
                <!-- Score -->
                <div class="mb-6">
                    <div class="flex justify-between items-center">
                        <span class="text-white/70">–ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</span>
                        <span id="quiz-score" class="text-green-400 font-bold">0 / ${totalQuestions}</span>
                    </div>
                </div>
                
                <!-- Question -->
                <div class="question-container glass rounded-2xl p-6 mb-6 border border-white/10">
                    <div class="text-white/70 text-sm mb-2">–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:</div>
                    <div class="text-3xl font-bold text-white mb-2" id="quiz-word">${shuffledWords[0].word}</div>
                    <div class="text-purple-400 text-lg" id="quiz-transcription">${shuffledWords[0].transcription}</div>
                </div>
                
                <!-- Answer Options -->
                <div class="answer-options space-y-3 mb-6" id="answer-options">
                    <!-- Options will be generated here -->
                </div>
                
                <!-- Next Button -->
                <div class="flex gap-4">
                    <button id="quiz-next-btn" class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-white/10 text-white/50 border border-white/20 cursor-not-allowed transition-all" disabled>
                        –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Üí
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', quizHTML);
    
    // Store quiz session data
    window.currentQuizSession = {
        situation: situation,
        data: data,
        shuffledWords: shuffledWords,
        currentQuestionIndex: 0,
        correctAnswers: 0,
        totalQuestions: totalQuestions,
        userAnswers: [],
        selectedAnswer: null
    };
    
    // Generate first question
    generateQuizQuestion();
}

// Generate quiz question with multiple choice options
function generateQuizQuestion() {
    const session = window.currentQuizSession;
    if (!session) return;
    
    const currentWord = session.shuffledWords[session.currentQuestionIndex];
    const correctAnswer = currentWord.translation;
    
    // Get 3 random wrong answers from other words
    const otherWords = session.data.words.filter(w => w.translation !== correctAnswer);
    const wrongAnswers = otherWords
        .sort(() => Math.random() - 0.5)
        .slice(0, 3)
        .map(w => w.translation);
    
    // Combine correct and wrong answers, then shuffle
    const allAnswers = [correctAnswer, ...wrongAnswers].sort(() => Math.random() - 0.5);
    
    // Update question display
    document.getElementById('quiz-word').textContent = currentWord.word;
    document.getElementById('quiz-transcription').textContent = currentWord.transcription;
    
    // Generate answer options
    const optionsContainer = document.getElementById('answer-options');
    optionsContainer.innerHTML = allAnswers.map((answer, index) => `
        <div class="answer-option glass rounded-2xl p-4 border border-white/10 hover:border-white/20 transition-all cursor-pointer" 
             data-answer="${answer}" onclick="selectAnswer('${answer}', '${correctAnswer}', this)">
            <div class="text-white font-semibold">${answer}</div>
        </div>
    `).join('');
    
    // Reset selection state
    session.selectedAnswer = null;
    const nextBtn = document.getElementById('quiz-next-btn');
    nextBtn.disabled = true;
    nextBtn.classList.add('bg-white/10', 'text-white/50', 'cursor-not-allowed');
    nextBtn.classList.remove('bg-gradient-to-r', 'from-green-500', 'to-blue-500', 'text-white');
}

// Handle answer selection (mobile optimized)
function selectAnswer(selectedAnswer, correctAnswer, element) {
    const session = window.currentQuizSession;
    if (!session) return;
    
    // Mobile detection
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                     window.innerWidth <= 768;
    
    // Mobile haptic feedback (if available)
    if (isMobile && navigator.vibrate) {
        const isCorrect = selectedAnswer === correctAnswer;
        navigator.vibrate(isCorrect ? [50] : [100, 50, 100]);
    }
    
    // Remove previous selections
    document.querySelectorAll('.answer-option').forEach(option => {
        option.classList.remove('border-green-400', 'border-red-400', 'bg-green-500/20', 'bg-red-500/20');
        option.classList.add('border-white/10');
        option.style.transform = '';
    });
    
    // Mark selected answer with mobile-friendly animation
    const isCorrect = selectedAnswer === correctAnswer;
    if (isCorrect) {
        element.classList.add('border-green-400', 'bg-green-500/20');
        if (isMobile) {
            element.style.transform = 'scale(1.02)';
            setTimeout(() => element.style.transform = '', 300);
        }
        session.correctAnswers++;
    } else {
        element.classList.add('border-red-400', 'bg-red-500/20');
        if (isMobile) {
            // Shake animation for wrong answer
            element.style.animation = 'shake 0.5s ease-in-out';
            setTimeout(() => element.style.animation = '', 500);
        }
        
        // Also highlight the correct answer
        document.querySelectorAll('.answer-option').forEach(option => {
            if (option.dataset.answer === correctAnswer) {
                option.classList.add('border-green-400', 'bg-green-500/20');
                if (isMobile) {
                    option.style.transform = 'scale(1.02)';
                    setTimeout(() => option.style.transform = '', 300);
                }
            }
        });
    }
    
    // Store user answer
    session.userAnswers.push({
        word: session.shuffledWords[session.currentQuestionIndex].word,
        correctAnswer: correctAnswer,
        userAnswer: selectedAnswer,
        isCorrect: isCorrect
    });
    
    session.selectedAnswer = selectedAnswer;
    
    // Update score
    document.getElementById('quiz-score').textContent = `${session.correctAnswers} / ${session.totalQuestions}`;
    
    // Enable next button
    const nextBtn = document.getElementById('quiz-next-btn');
    nextBtn.disabled = false;
    nextBtn.classList.remove('bg-white/10', 'text-white/50', 'cursor-not-allowed');
    nextBtn.classList.add('bg-gradient-to-r', 'from-green-500', 'to-blue-500', 'text-white');
    
    // Update button text for last question
    if (session.currentQuestionIndex === session.totalQuestions - 1) {
        nextBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç ‚úì';
        nextBtn.onclick = () => completeQuiz();
    } else {
        nextBtn.onclick = () => nextQuizQuestion();
    }
    
    // Disable all options to prevent multiple selections
    document.querySelectorAll('.answer-option').forEach(option => {
        option.style.pointerEvents = 'none';
    });
}

// Move to next quiz question
function nextQuizQuestion() {
    const session = window.currentQuizSession;
    if (!session) return;
    
    if (session.currentQuestionIndex < session.totalQuestions - 1) {
        session.currentQuestionIndex++;
        
        // Update progress
        const progressText = `${session.currentQuestionIndex + 1} / ${session.totalQuestions}`;
        document.getElementById('quiz-progress-text').textContent = progressText;
        document.getElementById('quiz-progress-bar').style.width = `${((session.currentQuestionIndex + 1) / session.totalQuestions) * 100}%`;
        
        // Generate next question
        generateQuizQuestion();
    }
}

// Complete quiz and show results
function completeQuiz() {
    const session = window.currentQuizSession;
    if (!session) return;
    
    const percentage = Math.round((session.correctAnswers / session.totalQuestions) * 100);
    let resultMessage = '';
    let resultEmoji = '';
    
    if (percentage >= 90) {
        resultMessage = '–í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏ —á—É–¥–æ–≤–æ –∑–Ω–∞—î—Ç–µ —Å–ª–æ–≤–∞!';
        resultEmoji = 'üèÜ';
    } else if (percentage >= 70) {
        resultMessage = '–î–æ–±—Ä–µ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤–∏–≤—á–∞—Ç–∏!';
        resultEmoji = 'üéâ';
    } else if (percentage >= 50) {
        resultMessage = '–ù–µ–ø–æ–≥–∞–Ω–æ! –Ñ –Ω–∞–¥ —á–∏–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!';
        resultEmoji = 'üëç';
    } else {
        resultMessage = '–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!';
        resultEmoji = 'üí™';
    }
    
    const resultsHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-3xl p-8 max-w-lg w-full glass border border-white/20 text-center">
                <div class="text-6xl mb-4">${resultEmoji}</div>
                <h2 class="text-3xl font-bold text-white mb-4">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h2>
                <p class="text-white/70 text-lg mb-6">${resultMessage}</p>
                
                <!-- Results Stats -->
                <div class="glass rounded-2xl p-6 mb-6 border border-white/10">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <div class="text-2xl font-bold text-green-400">${session.correctAnswers}</div>
                            <div class="text-white/70 text-sm">–ü—Ä–∞–≤–∏–ª—å–Ω–æ</div>
                        </div>
                        <div>
                            <div class="text-2xl font-bold text-red-400">${session.totalQuestions - session.correctAnswers}</div>
                            <div class="text-white/70 text-sm">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</div>
                        </div>
                    </div>
                    <div class="mt-4 pt-4 border-t border-white/10">
                        <div class="text-3xl font-bold text-white">${percentage}%</div>
                        <div class="text-white/70 text-sm">–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                    </div>
                </div>
                
                <div class="flex gap-4">
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all" onclick="endPractice()">
                        ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                    </button>
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-gradient-to-r from-green-500 to-blue-500 text-white hover:from-green-600 hover:to-blue-600 transition-all" onclick="restartQuiz()">
                        üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Replace current modal
    const currentModal = document.querySelector('.fixed.inset-0.z-50');
    if (currentModal) {
        currentModal.remove();
    }
    
    document.body.insertAdjacentHTML('beforeend', resultsHTML);
}

// Restart quiz
function restartQuiz() {
    const session = window.currentQuizSession;
    if (!session) return;
    
    endPractice();
    startQuizPractice(session.situation, session.data);
}

// Drag and Drop Practice
function startDragDropPractice(situation, data) {
    let currentRound = 0;
    let correctMatches = 0;
    let totalRounds = Math.ceil(data.words.length / 6); // 6 pairs per round
    let wordsPerRound = 6;
    let currentMatches = 0;
    let draggedElement = null;
    
    const dragDropHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-2 sm:p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-2xl sm:rounded-3xl p-4 sm:p-8 max-w-5xl w-full max-h-[95vh] sm:max-h-[90vh] overflow-y-auto glass border border-white/20">
                <!-- Header -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-4">
                        <div class="text-4xl">${data.icon}</div>
                        <h2 class="text-2xl font-bold text-white">–î—Ä–∞–≥ –µ–Ω–¥ –¥—Ä–æ–ø: ${data.title}</h2>
                    </div>
                    <button class="text-white/60 hover:text-white text-2xl" onclick="endPractice()">√ó</button>
                </div>
                
                <!-- Progress -->
                <div class="mb-6">
                    <div class="flex justify-between text-white/70 text-sm mb-2">
                        <span>–†–∞—É–Ω–¥</span>
                        <span id="dd-progress-text">1 / ${totalRounds}</span>
                    </div>
                    <div class="w-full bg-white/10 rounded-full h-2">
                        <div id="dd-progress-bar" class="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all" style="width: ${(1/totalRounds)*100}%"></div>
                    </div>
                </div>
                
                <!-- Score -->
                <div class="mb-6">
                    <div class="flex justify-between items-center">
                        <span class="text-white/70">–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤:</span>
                        <span id="dd-score" class="text-purple-400 font-bold">0 / ${Math.min(wordsPerRound, data.words.length)}</span>
                    </div>
                </div>
                
                                 <!-- Instructions -->
                 <div class="mb-4 sm:mb-6 text-center">
                     <p class="text-white/70 text-sm sm:text-base">–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ –¥–æ —ó—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤</p>
                 </div>
                 
                 <!-- Game Area -->
                 <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8 mb-4 sm:mb-6">
                     <!-- English Words (Left Side) -->
                     <div class="space-y-2 sm:space-y-3">
                         <h3 class="text-base sm:text-lg font-bold text-white mb-3 sm:mb-4 text-center">üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞</h3>
                         <div id="english-words" class="space-y-2 sm:space-y-3">
                             <!-- Words will be generated here -->
                         </div>
                     </div>
                     
                     <!-- Ukrainian Translations (Right Side) -->
                     <div class="space-y-2 sm:space-y-3">
                         <h3 class="text-base sm:text-lg font-bold text-white mb-3 sm:mb-4 text-center">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏</h3>
                         <div id="ukrainian-words" class="space-y-2 sm:space-y-3">
                             <!-- Translations will be generated here -->
                         </div>
                     </div>
                 </div>
                
                <!-- Controls -->
                <div class="flex gap-4">
                    <button id="dd-next-btn" class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-white/10 text-white/50 border border-white/20 cursor-not-allowed transition-all" disabled>
                        –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥ ‚Üí
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', dragDropHTML);
    
    // Store drag drop session data
    window.currentDragDropSession = {
        situation: situation,
        data: data,
        currentRound: 0,
        correctMatches: 0,
        totalRounds: totalRounds,
        wordsPerRound: wordsPerRound,
        currentMatches: 0,
        draggedElement: null
    };
    
    // Generate first round
    generateDragDropRound();
}

// Generate words for current round
function generateDragDropRound() {
    const session = window.currentDragDropSession;
    if (!session) return;
    
    const startIndex = session.currentRound * session.wordsPerRound;
    const endIndex = Math.min(startIndex + session.wordsPerRound, session.data.words.length);
    const roundWords = session.data.words.slice(startIndex, endIndex);
    
    // Shuffle translations for difficulty
    const shuffledTranslations = [...roundWords.map(w => w.translation)].sort(() => Math.random() - 0.5);
    
    // Generate English words (draggable)
    const englishContainer = document.getElementById('english-words');
    englishContainer.innerHTML = roundWords.map((word, index) => `
        <div class="drag-word glass rounded-xl sm:rounded-2xl p-3 sm:p-4 border border-white/10 hover:border-purple-400/50 transition-all cursor-grab active:cursor-grabbing" 
             draggable="true" 
             data-word="${word.word}" 
             data-translation="${word.translation}"
             ondragstart="startDrag(event, this)"
             ondragend="endDrag(event, this)">
            <div class="text-white font-semibold text-base sm:text-lg">${word.word}</div>
            <div class="text-purple-400 text-xs sm:text-sm">${word.transcription}</div>
        </div>
    `).join('');
    
    // Generate Ukrainian translations (drop zones)
    const ukrainianContainer = document.getElementById('ukrainian-words');
        ukrainianContainer.innerHTML = shuffledTranslations.map((translation, index) => `
        <div class="drop-zone glass rounded-xl sm:rounded-2xl p-3 sm:p-4 border border-white/10 hover:border-pink-400/50 transition-all min-h-[60px] sm:min-h-[80px] flex items-center justify-center" 
             data-translation="${translation}"
             ondragover="allowDrop(event)"
             ondragleave="dragLeave(event)"
             ondrop="dropWord(event, this)">
            <div class="text-white font-semibold text-sm sm:text-lg text-center">${translation}</div>
        </div>
    `).join('');
    
    // Reset round stats
    session.currentMatches = 0;
    document.getElementById('dd-score').textContent = `0 / ${roundWords.length}`;
    
    // Update progress
    const progressText = `${session.currentRound + 1} / ${session.totalRounds}`;
    document.getElementById('dd-progress-text').textContent = progressText;
}

// Drag and drop handlers
function startDrag(event, element) {
    const session = window.currentDragDropSession;
    if (!session) return;
    
    session.draggedElement = element;
    element.style.opacity = '0.5';
    element.style.transform = 'scale(0.95)';
    
    // Store data for transfer
    event.dataTransfer.setData('text/plain', element.dataset.word);
    event.dataTransfer.setData('translation', element.dataset.translation);
}

function endDrag(event, element) {
    element.style.opacity = '1';
    element.style.transform = 'scale(1)';
}

function allowDrop(event) {
    event.preventDefault();
    
    // Add visual feedback
    const dropZone = event.currentTarget;
    dropZone.style.borderColor = '#a855f7';
    dropZone.style.backgroundColor = 'rgba(168, 85, 247, 0.1)';
}

// Handle drag leave
function dragLeave(event) {
    const dropZone = event.currentTarget;
    dropZone.style.borderColor = '';
    dropZone.style.backgroundColor = '';
}

function dropWord(event, dropZone) {
    event.preventDefault();
    const session = window.currentDragDropSession;
    if (!session) return;
    
    // Reset visual feedback
    dropZone.style.borderColor = '';
    dropZone.style.backgroundColor = '';
    
    const draggedWord = event.dataTransfer.getData('text/plain');
    const draggedTranslation = event.dataTransfer.getData('translation');
    const targetTranslation = dropZone.dataset.translation;
    
    // Check if it's a correct match
    if (draggedTranslation === targetTranslation) {
        // Correct match!
        session.currentMatches++;
        session.correctMatches++;
        
        // Visual feedback for correct match
        dropZone.style.borderColor = '#10b981';
        dropZone.style.backgroundColor = 'rgba(16, 185, 129, 0.2)';
        
        // Add checkmark
        dropZone.innerHTML = `
            <div class="text-center">
                <div class="text-2xl mb-2">‚úÖ</div>
                <div class="text-white font-semibold">${draggedWord}</div>
                <div class="text-green-400 text-sm">‚Üì</div>
                <div class="text-white font-semibold">${targetTranslation}</div>
            </div>
        `;
        
        // Remove the dragged word
        if (session.draggedElement) {
            session.draggedElement.remove();
        }
        
        // Update score
        const currentRoundWords = Math.min(session.wordsPerRound, 
            session.data.words.length - (session.currentRound * session.wordsPerRound));
        document.getElementById('dd-score').textContent = `${session.currentMatches} / ${currentRoundWords}`;
        
        // Check if round is complete
        if (session.currentMatches === currentRoundWords) {
            setTimeout(() => {
                completeRound();
            }, 1000);
        }
    } else {
        // Wrong match - visual feedback
        dropZone.style.borderColor = '#ef4444';
        dropZone.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';
        
        // Return dragged element to original position with animation
        if (session.draggedElement) {
            session.draggedElement.style.animation = 'shake 0.5s ease-in-out';
            setTimeout(() => {
                session.draggedElement.style.animation = '';
            }, 500);
        }
        
        // Reset drop zone after animation
        setTimeout(() => {
            dropZone.style.borderColor = '';
            dropZone.style.backgroundColor = '';
        }, 500);
    }
    
    session.draggedElement = null;
}

// Complete current round
function completeRound() {
    const session = window.currentDragDropSession;
    if (!session) return;
    
    if (session.currentRound < session.totalRounds - 1) {
        // More rounds to go
        session.currentRound++;
        session.currentMatches = 0;
        
        // Update progress bar
        document.getElementById('dd-progress-bar').style.width = 
            `${((session.currentRound + 1) / session.totalRounds) * 100}%`;
        
        // Enable next button
        const nextBtn = document.getElementById('dd-next-btn');
        nextBtn.disabled = false;
        nextBtn.classList.remove('bg-white/10', 'text-white/50', 'cursor-not-allowed');
        nextBtn.classList.add('bg-gradient-to-r', 'from-purple-500', 'to-pink-500', 'text-white');
        nextBtn.onclick = () => {
            nextBtn.disabled = true;
            nextBtn.classList.add('bg-white/10', 'text-white/50', 'cursor-not-allowed');
            nextBtn.classList.remove('bg-gradient-to-r', 'from-purple-500', 'to-pink-500', 'text-white');
            generateDragDropRound();
        };
    } else {
        // All rounds complete
        setTimeout(() => {
            completeDragDropPractice();
        }, 1500);
    }
}

// Complete drag and drop practice
function completeDragDropPractice() {
    const session = window.currentDragDropSession;
    if (!session) return;
    
    const totalWords = session.data.words.length;
    const percentage = Math.round((session.correctMatches / totalWords) * 100);
    let resultMessage = '';
    let resultEmoji = '';
    
    if (percentage >= 90) {
        resultMessage = '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ! –í–∏ –º–∞–π—Å—Ç–µ—Ä–Ω–æ –∑\'—î–¥–Ω–∞–ª–∏ –≤—Å—ñ —Å–ª–æ–≤–∞!';
        resultEmoji = 'üèÜ';
    } else if (percentage >= 70) {
        resultMessage = '–ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏!';
        resultEmoji = 'üéâ';
    } else if (percentage >= 50) {
        resultMessage = '–î–æ–±—Ä–µ! –Ñ –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!';
        resultEmoji = 'üëç';
    } else {
        resultMessage = '–ù–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å! –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–æ–±–∏—Ç—å –º–∞–π—Å—Ç—Ä–∞!';
        resultEmoji = 'üí™';
    }
    
    const resultsHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-3xl p-8 max-w-lg w-full glass border border-white/20 text-center">
                <div class="text-6xl mb-4">${resultEmoji}</div>
                <h2 class="text-3xl font-bold text-white mb-4">–ü—Ä–∞–∫—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h2>
                <p class="text-white/70 text-lg mb-6">${resultMessage}</p>
                
                <!-- Results Stats -->
                <div class="glass rounded-2xl p-6 mb-6 border border-white/10">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <div class="text-2xl font-bold text-purple-400">${session.correctMatches}</div>
                            <div class="text-white/70 text-sm">–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤</div>
                        </div>
                        <div>
                            <div class="text-2xl font-bold text-pink-400">${totalWords - session.correctMatches}</div>
                            <div class="text-white/70 text-sm">–ü–æ–º–∏–ª–æ–∫</div>
                        </div>
                    </div>
                    <div class="mt-4 pt-4 border-t border-white/10">
                        <div class="text-3xl font-bold text-white">${percentage}%</div>
                        <div class="text-white/70 text-sm">–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                    </div>
                </div>
                
                <div class="flex gap-4">
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all" onclick="endPractice()">
                        ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                    </button>
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 transition-all" onclick="restartDragDrop()">
                        üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Replace current modal
    const currentModal = document.querySelector('.fixed.inset-0.z-50');
    if (currentModal) {
        currentModal.remove();
    }
    
    document.body.insertAdjacentHTML('beforeend', resultsHTML);
}

// Restart drag drop practice
function restartDragDrop() {
    const session = window.currentDragDropSession;
    if (!session) return;
    
    endPractice();
    startDragDropPractice(session.situation, session.data);
}

// Complete practice
function completePractice() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    const completionHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-black/90 rounded-3xl p-8 max-w-lg w-full glass border border-white/20 text-center">
                <div class="text-6xl mb-4">üéâ</div>
                <h2 class="text-3xl font-bold text-white mb-4">–í—ñ—Ç–∞—î–º–æ!</h2>
                <p class="text-white/70 text-lg mb-6">–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∑ ${session.data.words.length} —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ "${session.data.title}"</p>
                
                <div class="flex gap-4">
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all" onclick="endPractice()">
                        ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                    </button>
                    <button class="flex-1 px-6 py-3 rounded-2xl font-semibold bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:from-purple-600 hover:to-blue-600 transition-all" onclick="restartFlashcards()">
                        üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Replace current modal
    const currentModal = document.querySelector('.fixed.inset-0.z-50');
    if (currentModal) {
        currentModal.remove();
    }
    
    document.body.insertAdjacentHTML('beforeend', completionHTML);
}

// Restart flashcards
function restartFlashcards() {
    const session = window.currentFlashcardSession;
    if (!session) return;
    
    endPractice();
    startFlashcardsPractice(session.situation, session.data);
}

// End practice (mobile optimized)
function endPractice() {
    console.log('endPractice called');
    
    // Mobile detection
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                     window.innerWidth <= 768;
    
    const modals = document.querySelectorAll('.fixed[class*="z-50"]');
    console.log('Removing practice modals:', modals.length);
    
    // Restore body scroll for mobile
    if (isMobile) {
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
    }
    
    if (modals.length > 0) {
        modals.forEach(modal => {
            if (isMobile) {
                // Smooth close animation for mobile
                modal.style.opacity = '0';
                modal.style.transform = 'scale(0.95)';
                setTimeout(() => modal.remove(), 200);
            } else {
                modal.remove();
            }
        });
    }
    
    // Clear sessions
    if (window.currentFlashcardSession) {
        delete window.currentFlashcardSession;
    }
    if (window.currentQuizSession) {
        delete window.currentQuizSession;
    }
    if (window.currentDragDropSession) {
        delete window.currentDragDropSession;
    }
}

// Ensure functions are exported immediately and multiple times
function exportFunctions() {
    if (typeof window !== 'undefined') {
        // Force export with error handling
        try {
            window.viewWords = viewWords;
            window.practiceWords = practiceWords;
            window.closeModal = closeModal;
            window.closePracticeModal = closePracticeModal;
            window.startPractice = startPractice;
            window.flipCard = flipCard;
            window.nextCard = nextCard;
            window.previousCard = previousCard;
            window.endPractice = endPractice;
            
            // Additional check and re-export if needed
            if (typeof window.viewWords !== 'function') {
                window.viewWords = function(situation) {
                    console.log('Fallback viewWords called');
                    return viewWords(situation);
                };
            }
            
            if (typeof window.practiceWords !== 'function') {
                window.practiceWords = function(situation) {
                    console.log('Fallback practiceWords called');
                    return practiceWords(situation);
                };
            }
            
            console.log('‚úÖ All functions exported to window scope');
            console.log('üîç Function check:', {
                viewWords: typeof window.viewWords,
                practiceWords: typeof window.practiceWords,
                closeModal: typeof window.closeModal
            });
            
            return true;
        } catch (error) {
            console.error('‚ùå Error exporting functions:', error);
            return false;
        }
    }
    return false;
}

// Export immediately multiple times for reliability
exportFunctions();
setTimeout(exportFunctions, 10);
setTimeout(exportFunctions, 100);
setTimeout(exportFunctions, 500);

// Initialize vocabulary page
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìö Vocabulary.js DOM loaded');
    console.log('üìä Vocabulary data contains:', Object.keys(vocabularyData).length, 'situations');
    
    // Export again to be sure
    exportFunctions();
    
    // Add styles for modal elements
    const style = document.createElement('style');
    style.textContent = `
        .tab-btn {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .tab-btn.active {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            border-color: transparent;
        }
        .tab-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .tab-btn.active:hover {
            background: linear-gradient(135deg, #5b5bd6, #7c3aed);
        }
        .word-card:hover {
            transform: translateY(-2px);
        }
        .phrase-card:hover {
            transform: translateY(-2px);
        }
        .practice-option:hover {
            transform: translateY(-2px);
        }
        .card-side {
            transition: opacity 0.3s ease;
        }
        .drag-word:hover {
            transform: translateY(-2px);
        }
        .drop-zone {
            transition: all 0.3s ease;
        }
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-3px); }
            20%, 40%, 60%, 80% { transform: translateX(3px); }
        }
        
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .practice-option:active {
                transform: scale(0.96);
                background: rgba(139, 92, 246, 0.2) !important;
            }
            .btn-view:active, .btn-practice:active {
                transform: scale(0.93);
                background: rgba(99, 102, 241, 0.8) !important;
            }
            .flashcard {
                min-height: 220px !important;
                padding: 1.5rem !important;
            }
            .answer-option {
                min-height: 60px;
                padding: 1rem !important;
                font-size: 1.1rem;
            }
            .answer-option:active {
                transform: scale(0.96);
            }
            /* Larger close buttons on mobile */
            .fixed button[onclick*="close"] {
                min-width: 48px !important;
                min-height: 48px !important;
                font-size: 1.5rem !important;
            }
            /* Better spacing in modals */
            .fixed .p-4 {
                padding: 1rem !important;
            }
            .fixed .p-8 {
                padding: 1.5rem !important;
            }
        }
        
        /* Extra small screens */
        @media (max-width: 480px) {
            .flashcard {
                min-height: 180px !important;
                padding: 1rem !important;
            }
            .answer-option {
                min-height: 56px;
                font-size: 1rem;
            }
            .fixed .max-w-4xl, .fixed .max-w-2xl {
                max-width: 95vw !important;
            }
            .fixed .p-4 {
                padding: 0.75rem !important;
            }
            .fixed .p-8 {
                padding: 1rem !important;
            }
        }
        
        /* Touch-friendly elements */
        .btn-view, .btn-practice, .practice-option, .answer-option, .flashcard button {
            min-height: 48px;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
            -webkit-user-select: none;
            position: relative;
            overflow: hidden;
        }
        
        /* Touch feedback animation */
        .practice-option::after, .answer-option::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.2s ease, height 0.2s ease;
            pointer-events: none;
            z-index: 1;
        }
        
        .practice-option:active::after, .answer-option:active::after {
            width: 100px;
            height: 100px;
        }
        
        /* Prevent zoom on double tap */
        .flashcard, .practice-option, .answer-option, .tab-btn {
            touch-action: manipulation;
        }
        
        /* Better modal positioning on mobile */
        @media (max-width: 768px) and (orientation: landscape) {
            .fixed.inset-0 {
                padding: 0.5rem;
            }
            .flashcard {
                min-height: 160px !important;
            }
        }
    `;
    document.head.appendChild(style);
});

// Global functions
// Debug logging
console.log('Vocabulary.js loaded successfully');
console.log('Available vocabulary data:', Object.keys(vocabularyData));

// Final export of all functions
console.log('üìã Available vocabulary data:', Object.keys(vocabularyData));

// Last chance export
setTimeout(() => {
    exportFunctions();
    
    // Additional functions for practice modes
    if (typeof window !== 'undefined') {
        window.restartFlashcards = restartFlashcards;
        window.generateQuizQuestion = generateQuizQuestion;
        window.selectAnswer = selectAnswer;
        window.nextQuizQuestion = nextQuizQuestion;
        window.completeQuiz = completeQuiz;
        window.restartQuiz = restartQuiz;
        window.generateDragDropRound = generateDragDropRound;
        window.startDrag = startDrag;
        window.endDrag = endDrag;
        window.allowDrop = allowDrop;
        window.dragLeave = dragLeave;
        window.dropWord = dropWord;
        window.completeRound = completeRound;
        window.completeDragDropPractice = completeDragDropPractice;
        window.restartDragDrop = restartDragDrop;
        
        console.log('üöÄ All vocabulary functions ready!');
    }
}, 10); 